<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\ouput\MyKee.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\ouput\MyKee.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jan 13 06:08:40 2024
<BR><P>
<H3>Maximum Stack Usage =       2088 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; menu_login &rArr; menu_loginuser &rArr; main_menu_user_task &rArr; user_mykee_task &rArr; wrong_unauth_key_check &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c]">Reset_Handler</a>
 <LI><a href="#[a1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1ab]">dnsParseName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ab]">dnsParseName</a><BR>
 <LI><a href="#[1a4]">dnsCompareName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a4]">dnsCompareName</a><BR>
 <LI><a href="#[1d8]">system_restart</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">delay</a><BR>
 <LI><a href="#[cf]">prot_log_event</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">delay</a><BR>
 <LI><a href="#[2b0]">total_register</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">delay</a><BR>
 <LI><a href="#[d6]">read_code</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13f]">lcd_init</a><BR>
 <LI><a href="#[bf]">key1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[171]">tcpClienthbTask</a><BR>
 <LI><a href="#[1d5]">fw_download_sd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">delay</a><BR>
 <LI><a href="#[25e]">mdnsCompareName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25e]">mdnsCompareName</a><BR>
 <LI><a href="#[153]">handle_protocol_configpacket</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[da]">writedefaults_sdcard</a><BR>
 <LI><a href="#[da]">writedefaults_sdcard</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c3]">delay</a><BR>
 <LI><a href="#[1a3]">dnsCompareEncodedName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a3]">dnsCompareEncodedName</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">Reset_Handler</a> from startup_lpc23xx.o(RESET) referenced 6 times from startup_lpc23xx.o(RESET)
 <LI><a href="#[15]">TICKER_25us_Handler</a> from timer.o(i.TICKER_25us_Handler) referenced from target.o(i.TargetResetInit)
 <LI><a href="#[14]">TICKER_Handler</a> from timer.o(i.TICKER_Handler) referenced from target.o(i.TargetResetInit)
 <LI><a href="#[d]">TargetResetInit</a> from target.o(i.TargetResetInit) referenced from startup_lpc23xx.o(RESET)
 <LI><a href="#[16]">UART0_Handler</a> from uart.o(i.UART0_Handler) referenced from target.o(i.TargetResetInit)
 <LI><a href="#[17]">UART1_Handler</a> from uart.o(i.UART1_Handler) referenced from target.o(i.TargetResetInit)
 <LI><a href="#[2d]">__main</a> from __main.o(!!!main) referenced from startup_lpc23xx.o(RESET)
 <LI><a href="#[10]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[12]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[11]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[18]">dhcpClientProcessMessage</a> from dhcp_client_misc.o(i.dhcpClientProcessMessage) referenced from dhcp_client.o(i.dhcpClientStart)
 <LI><a href="#[19]">dnsProcessResponse</a> from dns_client.o(i.dnsProcessResponse) referenced from dns_client.o(i.dnsResolve)
 <LI><a href="#[21]">dp83848DisableIrq</a> from dp83848_driver.o(i.dp83848DisableIrq) referenced from dp83848_driver.o(.constdata)
 <LI><a href="#[20]">dp83848EnableIrq</a> from dp83848_driver.o(i.dp83848EnableIrq) referenced from dp83848_driver.o(.constdata)
 <LI><a href="#[22]">dp83848EventHandler</a> from dp83848_driver.o(i.dp83848EventHandler) referenced from dp83848_driver.o(.constdata)
 <LI><a href="#[1e]">dp83848Init</a> from dp83848_driver.o(i.dp83848Init) referenced from dp83848_driver.o(.constdata)
 <LI><a href="#[1f]">dp83848Tick</a> from dp83848_driver.o(i.dp83848Tick) referenced from dp83848_driver.o(.constdata)
 <LI><a href="#[13]">fputc</a> from debug.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[26]">lpc23xxEthDisableIrq</a> from lpc23xx_eth_driver.o(i.lpc23xxEthDisableIrq) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[25]">lpc23xxEthEnableIrq</a> from lpc23xx_eth_driver.o(i.lpc23xxEthEnableIrq) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[27]">lpc23xxEthEventHandler</a> from lpc23xx_eth_driver.o(i.lpc23xxEthEventHandler) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[23]">lpc23xxEthInit</a> from lpc23xx_eth_driver.o(i.lpc23xxEthInit) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[1a]">lpc23xxEthIrqHandler</a> from lpc23xx_eth_driver.o(i.lpc23xxEthIrqHandler) referenced from lpc23xx_eth_driver.o(i.lpc23xxEthInit)
 <LI><a href="#[2c]">lpc23xxEthReadPhyReg</a> from lpc23xx_eth_driver.o(i.lpc23xxEthReadPhyReg) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[28]">lpc23xxEthSendPacket</a> from lpc23xx_eth_driver.o(i.lpc23xxEthSendPacket) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[24]">lpc23xxEthTick</a> from lpc23xx_eth_driver.o(i.lpc23xxEthTick) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[29]">lpc23xxEthUpdateMacAddrFilter</a> from lpc23xx_eth_driver.o(i.lpc23xxEthUpdateMacAddrFilter) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[2a]">lpc23xxEthUpdateMacConfig</a> from lpc23xx_eth_driver.o(i.lpc23xxEthUpdateMacConfig) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[2b]">lpc23xxEthWritePhyReg</a> from lpc23xx_eth_driver.o(i.lpc23xxEthWritePhyReg) referenced from lpc23xx_eth_driver.o(.constdata)
 <LI><a href="#[f]">main</a> from main.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[1b]">mdnsProcessMessage</a> from mdns_common.o(i.mdnsProcessMessage) referenced from mdns_common.o(i.mdnsInit)
 <LI><a href="#[1c]">nbnsProcessMessage</a> from nbns_common.o(i.nbnsProcessMessage) referenced from nbns_common.o(i.nbnsInit)
 <LI><a href="#[1d]">netTask</a> from net.o(i.netTask) referenced from net.o(i.netInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_lpc23xx.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc23xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[30]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[32c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[32d]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[32e]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[31]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[32f]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[32]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[70]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[34]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[36]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[38]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[3a]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[3b]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[3c]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[3e]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[330]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[40]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[42]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[44]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[331]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[50]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[332]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[46]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[333]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[334]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[48]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>

<P><STRONG><a name="[335]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[336]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[337]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[4a]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via Veneer)
</UL>

<P><STRONG><a name="[338]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[339]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[4b]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via Veneer)
</UL>

<P><STRONG><a name="[33a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[33b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[33c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[33d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[33e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[33f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[340]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[341]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[342]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[343]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[344]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[345]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[346]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[54]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[347]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[348]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[349]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[34a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[34b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[34c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[34d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2f]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[34e]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4d]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4f]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[34f]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[51]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[350]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a3]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[53]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[351]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[55]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a1]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_lpc23xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[352]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[353]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeHostname
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower (via Veneer)
</UL>

<P><STRONG><a name="[58]"></a>malloc</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[5c]"></a>isxdigit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, isxdigit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isxdigit &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_val (via Veneer)
</UL>

<P><STRONG><a name="[5d]"></a>toupper</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_val (via Veneer)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName (via Veneer)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName (via Veneer)
</UL>

<P><STRONG><a name="[5e]"></a>__2fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverwait (via Veneer)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateSend (via Veneer)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateReceive (via Veneer)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute (via Veneer)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit (via Veneer)
</UL>

<P><STRONG><a name="[60]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index (via Veneer)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp (via Veneer)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler (via Veneer)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard (via Veneer)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_keyevents (via Veneer)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_ip (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_identity (via Veneer)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToString (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2 (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy (via Veneer)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;structure_size (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpconfig_protocol_send (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket (via Veneer)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Connection_confiq (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd (via Veneer)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_protocol (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrong_unauth_key_check (via Veneer)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task (via Veneer)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access (via Veneer)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwreceive (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwSend (via Veneer)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwInit (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwConnect (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatereceive (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateSend (via Veneer)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateConnect (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation_client (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkcrc_server (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_serial_no_server (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket_hb (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecyptPIAMPacket_hb (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket (via Veneer)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStatereceive (via Veneer)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend (via Veneer)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation_client_event (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_verification_event (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_receive (via Veneer)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_int (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_tcp (via Veneer)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_hb (via Veneer)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_cliq (via Veneer)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1 (via Veneer)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnewkeys (via Veneer)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_str (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_keypad (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_cardreader (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_command (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_userenroll (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_userrecord (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user_details (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_database (via Veneer)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_database (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_status_lumi (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biomtric (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user (via Veneer)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment (via Veneer)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString (via Veneer)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSetIpv4ReverseName (via Veneer)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeHostname (via Veneer)
</UL>

<P><STRONG><a name="[62]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[64]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[66]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[67]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[65]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[39]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[33]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[6a]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[3d]"></a>_printf_int_oct</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, _printf_oct_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[355]"></a>_printf_longlong_oct</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_oct_int.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_printf_longlong_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[3f]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[35]"></a>_printf_hex_ptr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[6d]"></a>__printf</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[71]"></a>atoi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits (via Veneer)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task (via Veneer)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeHostname (via Veneer)
</UL>

<P><STRONG><a name="[1dd]"></a>strchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr (via Veneer)
</UL>

<P><STRONG><a name="[12b]"></a>memcmp</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr (via Veneer)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply (via Veneer)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr (via Veneer)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame (via Veneer)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket (via Veneer)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareRecord (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseNsRecord (via Veneer)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseAnRecord (via Veneer)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer (via Veneer)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak (via Veneer)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck (via Veneer)
</UL>

<P><STRONG><a name="[1ad]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address (via Veneer)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_info (via Veneer)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task (via Veneer)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1 (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve (via Veneer)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve (via Veneer)
</UL>

<P><STRONG><a name="[74]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareName (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareEncodedName (via Veneer)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName (via Veneer)
</UL>

<P><STRONG><a name="[76]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry (via Veneer)
</UL>

<P><STRONG><a name="[1dc]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_info (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event (via Veneer)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName (via Veneer)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy (via Veneer)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeHostname (via Veneer)
</UL>

<P><STRONG><a name="[1f1]"></a>strncmp</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_ble (via Veneer)
</UL>

<P><STRONG><a name="[ca]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd (via Veneer)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task (via Veneer)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend (via Veneer)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key (via Veneer)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Identity (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_keypad (via Veneer)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeHostname (via Veneer)
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_userbkp_sd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_taskbkp_sd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_task_sd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_sd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_keyevents_sd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_key_sd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_event_sd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_boot_sd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userbkp_sd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_taskbkp_sd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_sd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mac_sd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_boot_sd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddNsecRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4AddrRecord
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthReceivePacket
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[77]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[356]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>__aeabi_memmove</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memmove.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseKnownAnRecord
</UL>

<P><STRONG><a name="[79]"></a>__rt_memmove</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[357]"></a>__memmove_lastfew</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Identity
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsSendMessage
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[358]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>__aeabi_memmove4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
</UL>

<P><STRONG><a name="[35b]"></a>__aeabi_memmove8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__rt_memmove_w</STRONG> (ARM, 128 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7b]"></a>__memmove_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[35c]"></a>__memmove_lastfew_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[7d]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[35d]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r (via Veneer)
</UL>

<P><STRONG><a name="[35e]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[7f]"></a>strncpy</STRONG> (ARM, 108 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[1d6]"></a>strcmp</STRONG> (ARM, 240 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_uread4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateAck
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseKnownAnRecord
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>

<P><STRONG><a name="[360]"></a>__rt_uread4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_uwrite4</STRONG> (ARM, 0 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddNsecRecord
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4ReversePtrRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4AddrRecord
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[361]"></a>__rt_uwrite4</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>localtime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_time (via Veneer)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_doy_dow (via Veneer)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_date_time (via Veneer)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sec_time_value (via Veneer)
</UL>

<P><STRONG><a name="[85]"></a>mktime</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value (via Veneer)
</UL>

<P><STRONG><a name="[362]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dow1
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry (via Veneer)
</UL>

<P><STRONG><a name="[363]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__rt_heap_descriptor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
</UL>

<P><STRONG><a name="[49]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>

<P><STRONG><a name="[364]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[87]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[47]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[89]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>tolower</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[69]"></a>_printf_int_common</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[368]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[11]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[41]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[43]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[5f]"></a>_printf_char_file</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror (via Veneer)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[96]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[45]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[98]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[73]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[6b]"></a>_wcrtomb</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[82]"></a>_localtime_r</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[369]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[36a]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[36b]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[8f]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[92]"></a>_printf_fp_infnan</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[99]"></a>_strtoul</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[8b]"></a>_btod_etento</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[88]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[4e]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[9d]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[52]"></a>exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9f]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[9e]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a4]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[36c]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRand
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_Handler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r (via Veneer)
</UL>

<P><STRONG><a name="[8c]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[ab]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[aa]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[ac]"></a>__btod_div_common</STRONG> (ARM, 716 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[ad]"></a>_e2e</STRONG> (ARM, 244 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[8d]"></a>_btod_ediv</STRONG> (ARM, 56 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[8e]"></a>_btod_emul</STRONG> (ARM, 56 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[ae]"></a>__btod_mult_common</STRONG> (ARM, 616 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[af]"></a>AES128_CBC_decrypt_buffer</STRONG> (ARM, 204 bytes, Stack size 32 bytes, aesencriptionwipro.o(i.AES128_CBC_decrypt_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AES128_CBC_decrypt_buffer &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecyptPIAMPacket_hb
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecyptPIAMPacket
</UL>

<P><STRONG><a name="[b4]"></a>AES128_CBC_encrypt_buffer</STRONG> (ARM, 204 bytes, Stack size 32 bytes, aesencriptionwipro.o(i.AES128_CBC_encrypt_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES128_CBC_encrypt_buffer &rArr; Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWithIv
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockCopy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket_hb
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket
</UL>

<P><STRONG><a name="[b6]"></a>Check_board</STRONG> (ARM, 852 bytes, Stack size 48 bytes, util_menu.o(i.Check_board))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = Check_board &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dc_adc_ch
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ac_adc_ch
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_voltage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_voltage
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
</UL>

<P><STRONG><a name="[c5]"></a>Check_cardreader</STRONG> (ARM, 380 bytes, Stack size 56 bytes, util_menu.o(i.Check_cardreader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = Check_cardreader &rArr; regular_card &rArr; send_i2c_cmd &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regular_card
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pchar
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
</UL>

<P><STRONG><a name="[c8]"></a>Check_keypad</STRONG> (ARM, 496 bytes, Stack size 56 bytes, util_menu.o(i.Check_keypad))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = Check_keypad &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
</UL>

<P><STRONG><a name="[cc]"></a>Check_output</STRONG> (ARM, 860 bytes, Stack size 56 bytes, util_menu.o(i.Check_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = Check_output &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_on
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
</UL>

<P><STRONG><a name="[d0]"></a>Check_solenoid</STRONG> (ARM, 876 bytes, Stack size 56 bytes, util_menu.o(i.Check_solenoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = Check_solenoid &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_on
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
</UL>

<P><STRONG><a name="[d5]"></a>Customer_ID</STRONG> (ARM, 276 bytes, Stack size 8 bytes, util_menu.o(i.Customer_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = Customer_ID &rArr; delete_alluser &rArr; set_workdb &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
</UL>

<P><STRONG><a name="[db]"></a>DecyptPIAMPacket</STRONG> (ARM, 144 bytes, Stack size 80 bytes, aesencriptionwipro.o(i.DecyptPIAMPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DecyptPIAMPacket &rArr; AES128_CBC_decrypt_buffer &rArr; InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStatereceive
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
</UL>

<P><STRONG><a name="[dc]"></a>DecyptPIAMPacket_hb</STRONG> (ARM, 184 bytes, Stack size 688 bytes, aesencriptionwipro.o(i.DecyptPIAMPacket_hb))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = DecyptPIAMPacket_hb &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatereceive
</UL>

<P><STRONG><a name="[de]"></a>EncyptPIAMPacket</STRONG> (ARM, 252 bytes, Stack size 120 bytes, aesencriptionwipro.o(i.EncyptPIAMPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = EncyptPIAMPacket &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_packet
</UL>

<P><STRONG><a name="[df]"></a>EncyptPIAMPacket_hb</STRONG> (ARM, 204 bytes, Stack size 688 bytes, aesencriptionwipro.o(i.EncyptPIAMPacket_hb))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = EncyptPIAMPacket_hb &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_hb_protocol_packet
</UL>

<P><STRONG><a name="[e0]"></a>Find_card</STRONG> (ARM, 148 bytes, Stack size 16 bytes, login_menu.o(i.Find_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = Find_card &rArr; red_led_onoff &rArr; send_i2c_cmd &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_led_onoff
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greenled_onoff
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
</UL>

<P><STRONG><a name="[ea]"></a>ReadBytes</STRONG> (ARM, 128 bytes, Stack size 16 bytes, eeprom.o(i.ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userbkp_sd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_taskbkp_sd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_sd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mac_sd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_boot_sd
</UL>

<P><STRONG><a name="[ed]"></a>SectorErase</STRONG> (ARM, 180 bytes, Stack size 16 bytes, eeprom.o(i.SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SectorErase &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEn
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_sd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_keyevents_sd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_key_sd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftask_allign
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseboot_sdcard
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user_sector
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_backup_sector
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_keyevents
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
</UL>

<P><STRONG><a name="[ef]"></a>Serial_no</STRONG> (ARM, 296 bytes, Stack size 8 bytes, util_menu.o(i.Serial_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = Serial_no &rArr; delete_alluser &rArr; set_workdb &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_serial_no
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
</UL>

<P><STRONG><a name="[25c]"></a>Set_Trigger_Timeout</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer.o(i.Set_Trigger_Timeout))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
</UL>

<P><STRONG><a name="[f1]"></a>System_Identity</STRONG> (ARM, 236 bytes, Stack size 40 bytes, util_menu.o(i.System_Identity))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408 + Unknown Stack Size
<LI>Call Chain = System_Identity &rArr; alarm_handler &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
</UL>

<P><STRONG><a name="[f8]"></a>TICKER_100ms_Init</STRONG> (ARM, 68 bytes, Stack size 0 bytes, timer.o(i.TICKER_100ms_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[244]"></a>TICKER_100ms_Start</STRONG> (ARM, 28 bytes, Stack size 0 bytes, timer.o(i.TICKER_100ms_Start))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>TICKER_25us_Handler</STRONG> (ARM, 1728 bytes, Stack size 40 bytes, timer.o(i.TICKER_25us_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TICKER_25us_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(i.TargetResetInit)
</UL>
<P><STRONG><a name="[14]"></a>TICKER_Handler</STRONG> (ARM, 880 bytes, Stack size 32 bytes, timer.o(i.TICKER_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = TICKER_Handler &rArr; lcd_keypad
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dc_adc_ch
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ac_adc_ch
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_keypad
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_On
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_Off
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(i.TargetResetInit)
</UL>
<P><STRONG><a name="[f7]"></a>TICKER_Init</STRONG> (ARM, 108 bytes, Stack size 0 bytes, timer.o(i.TICKER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[243]"></a>TICKER_Start</STRONG> (ARM, 28 bytes, Stack size 0 bytes, timer.o(i.TICKER_Start))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>TargetResetInit</STRONG> (ARM, 684 bytes, Stack size 8 bytes, target.o(i.TargetResetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TargetResetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_on
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dis
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_100ms_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc23xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART0_Handler</STRONG> (ARM, 204 bytes, Stack size 36 bytes, uart.o(i.UART0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_uart0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(i.TargetResetInit)
</UL>
<P><STRONG><a name="[f9]"></a>UART0_init</STRONG> (ARM, 216 bytes, Stack size 0 bytes, uart.o(i.UART0_init))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[17]"></a>UART1_Handler</STRONG> (ARM, 204 bytes, Stack size 40 bytes, uart.o(i.UART1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART1_Handler &rArr; handle_protocol_ble &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_ble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> target.o(i.TargetResetInit)
</UL>
<P><STRONG><a name="[fa]"></a>UART1_init</STRONG> (ARM, 216 bytes, Stack size 0 bytes, uart.o(i.UART1_init))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[100]"></a>WrBytes</STRONG> (ARM, 256 bytes, Stack size 24 bytes, eeprom.o(i.WrBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEn
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_userbkp_sd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_taskbkp_sd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_task_sd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_sd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_keyevents_sd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_key_sd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_event_sd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_boot_sd
</UL>

<P><STRONG><a name="[ee]"></a>WriteEn</STRONG> (ARM, 60 bytes, Stack size 8 bytes, eeprom.o(i.WriteEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
</UL>

<P><STRONG><a name="[101]"></a>Wrong_entry</STRONG> (ARM, 44 bytes, Stack size 8 bytes, login_menu.o(i.Wrong_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = Wrong_entry &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
</UL>

<P><STRONG><a name="[6e]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[63]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_wctomb.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>

<P><STRONG><a name="[9a]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _wcrtomb.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[91]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[6f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[56]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a5]"></a>_ttywrch</STRONG> (ARM, 28 bytes, Stack size 8 bytes, retarget.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via Veneer)
</UL>

<P><STRONG><a name="[bc]"></a>ac_voltage</STRONG> (ARM, 56 bytes, Stack size 24 bytes, ac_dc_volt.o(i.ac_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ac_voltage &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>

<P><STRONG><a name="[fc]"></a>adc_init</STRONG> (ARM, 36 bytes, Stack size 0 bytes, adc.o(i.adc_init))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[104]"></a>add_enrollment</STRONG> (ARM, 860 bytes, Stack size 128 bytes, bio.o(i.add_enrollment))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = add_enrollment &rArr; add_enrollment_user &rArr; getresult_identy &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_userenroll
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_user_details
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_userrecord
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biomtric
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
</UL>

<P><STRONG><a name="[108]"></a>add_enrollment_user</STRONG> (ARM, 944 bytes, Stack size 72 bytes, bio.o(i.add_enrollment_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488 + Unknown Stack Size
<LI>Call Chain = add_enrollment_user &rArr; getresult_identy &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_identity
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_status_lumi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[112]"></a>add_task</STRONG> (ARM, 124 bytes, Stack size 16 bytes, protocol_comm.o(i.add_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = add_task &rArr; write_task_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_task_sd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[115]"></a>addnewkeys</STRONG> (ARM, 1244 bytes, Stack size 56 bytes, key_menu.o(i.addnewkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = addnewkeys &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_key_sd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_keys
</UL>

<P><STRONG><a name="[f2]"></a>alarm_handler</STRONG> (ARM, 2672 bytes, Stack size 48 bytes, login_menu.o(i.alarm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = alarm_handler &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_key_log
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_key_sd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftask_allign
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Identity
</UL>

<P><STRONG><a name="[10a]"></a>arm_trigger_value</STRONG> (ARM, 244 bytes, Stack size 48 bytes, bio.o(i.arm_trigger_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = arm_trigger_value &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bio_verification
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_database
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[11c]"></a>arpCreateEntry</STRONG> (ARM, 148 bytes, Stack size 24 bytes, arp.o(i.arpCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = arpCreateEntry &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[128]"></a>arpDumpPacket</STRONG> (ARM, 4 bytes, Stack size 0 bytes, arp.o(i.arpDumpPacket))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[11f]"></a>arpEnqueuePacket</STRONG> (ARM, 300 bytes, Stack size 40 bytes, arp.o(i.arpEnqueuePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = arpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[121]"></a>arpFindEntry</STRONG> (ARM, 88 bytes, Stack size 4 bytes, arp.o(i.arpFindEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arpFindEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
</UL>

<P><STRONG><a name="[125]"></a>arpFlushCache</STRONG> (ARM, 68 bytes, Stack size 16 bytes, arp.o(i.arpFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arpFlushCache &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[11e]"></a>arpFlushQueuedPackets</STRONG> (ARM, 76 bytes, Stack size 16 bytes, arp.o(i.arpFlushQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
</UL>

<P><STRONG><a name="[126]"></a>arpInit</STRONG> (ARM, 32 bytes, Stack size 8 bytes, arp.o(i.arpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[127]"></a>arpProcessPacket</STRONG> (ARM, 388 bytes, Stack size 32 bytes, arp.o(i.arpProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = arpProcessPacket &rArr; arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[12e]"></a>arpProcessReply</STRONG> (ARM, 432 bytes, Stack size 24 bytes, arp.o(i.arpProcessReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = arpProcessReply &rArr; arpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[12d]"></a>arpProcessRequest</STRONG> (ARM, 268 bytes, Stack size 40 bytes, arp.o(i.arpProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[133]"></a>arpResolve</STRONG> (ARM, 244 bytes, Stack size 24 bytes, arp.o(i.arpResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[135]"></a>arpSendProbe</STRONG> (ARM, 296 bytes, Stack size 64 bytes, arp.o(i.arpSendProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = arpSendProbe &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[131]"></a>arpSendQueuedPackets</STRONG> (ARM, 144 bytes, Stack size 32 bytes, arp.o(i.arpSendQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = arpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[132]"></a>arpSendReply</STRONG> (ARM, 304 bytes, Stack size 72 bytes, arp.o(i.arpSendReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
</UL>

<P><STRONG><a name="[134]"></a>arpSendRequest</STRONG> (ARM, 332 bytes, Stack size 80 bytes, arp.o(i.arpSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpDumpPacket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[13c]"></a>arpTick</STRONG> (ARM, 388 bytes, Stack size 24 bytes, arp.o(i.arpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = arpTick &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[13d]"></a>arrow_right_pressed</STRONG> (ARM, 260 bytes, Stack size 16 bytes, login_menu.o(i.arrow_right_pressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664 + Unknown Stack Size
<LI>Call Chain = arrow_right_pressed &rArr; main_menu_administrator &rArr; finger_module_menu &rArr; add_enrollment &rArr; add_enrollment_user &rArr; getresult_identy &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRand
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrong_entry
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>bio_verification</STRONG> (ARM, 264 bytes, Stack size 8 bytes, bio.o(i.bio_verification))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = bio_verification &rArr; delete_userrecord &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_userrecord
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>ble_door_open</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ble_commn.o(i.ble_door_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_door_open &rArr; send_bledata &rArr; p1char
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bledata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
</UL>

<P><STRONG><a name="[146]"></a>ble_invalid_login</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ble_commn.o(i.ble_invalid_login))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = ble_invalid_login &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bledata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
</UL>

<P><STRONG><a name="[147]"></a>ble_login_success</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ble_commn.o(i.ble_login_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_login_success &rArr; send_bledata &rArr; p1char
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bledata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
</UL>

<P><STRONG><a name="[f0]"></a>ble_serial_no</STRONG> (ARM, 144 bytes, Stack size 8 bytes, ble_commn.o(i.ble_serial_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_serial_no &rArr; read_system_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bledata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
</UL>

<P><STRONG><a name="[149]"></a>ble_task_select</STRONG> (ARM, 392 bytes, Stack size 24 bytes, ble_commn.o(i.ble_task_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_task_select &rArr; read_task_status &rArr; read_task_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bledata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_status
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
</UL>

<P><STRONG><a name="[14b]"></a>ble_user_key_no</STRONG> (ARM, 108 bytes, Stack size 40 bytes, login_menu.o(i.ble_user_key_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = ble_user_key_no &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
</UL>

<P><STRONG><a name="[14c]"></a>ble_user_key_status</STRONG> (ARM, 224 bytes, Stack size 24 bytes, login_menu.o(i.ble_user_key_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_user_key_status &rArr; read_keyevents_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bledata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
</UL>

<P><STRONG><a name="[c4]"></a>buzzer</STRONG> (ARM, 48 bytes, Stack size 0 bytes, buzzer.o(i.buzzer))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_key_no
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrong_entry
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrong_unauth_key_check
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwSend
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_cardreader
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>

<P><STRONG><a name="[f6]"></a>buzzer_Off</STRONG> (ARM, 16 bytes, Stack size 0 bytes, buzzer.o(i.buzzer_Off))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_Handler
</UL>

<P><STRONG><a name="[f5]"></a>buzzer_On</STRONG> (ARM, 16 bytes, Stack size 0 bytes, buzzer.o(i.buzzer_On))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_Handler
</UL>

<P><STRONG><a name="[14d]"></a>chage_bioflag</STRONG> (ARM, 220 bytes, Stack size 16 bytes, bio.o(i.chage_bioflag))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = chage_bioflag &rArr; self_user_allign_bio &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign_bio
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user_details
</UL>

<P><STRONG><a name="[105]"></a>check_biomtric</STRONG> (ARM, 264 bytes, Stack size 88 bytes, bio.o(i.check_biomtric))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = check_biomtric &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[14f]"></a>check_config_protocol</STRONG> (ARM, 172 bytes, Stack size 56 bytes, telnet_server.o(i.check_config_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = check_config_protocol &rArr; handle_protocol_configpacket &rArr;  writedefaults_sdcard (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_verification
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_protocol_length
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_verification
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute
</UL>

<P><STRONG><a name="[154]"></a>check_config_protocol_fw</STRONG> (ARM, 136 bytes, Stack size 8 bytes, tcp_client_fw.o(i.check_config_protocol_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_config_protocol_fw &rArr; pstr &rArr; pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwreceive
</UL>

<P><STRONG><a name="[155]"></a>check_config_receive</STRONG> (ARM, 84 bytes, Stack size 8 bytes, tcp_client_hb.o(i.check_config_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkcrc_server
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_serial_no_server
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatereceive
</UL>

<P><STRONG><a name="[159]"></a>check_event_receive</STRONG> (ARM, 320 bytes, Stack size 48 bytes, tcp_client_event.o(i.check_event_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = check_event_receive &rArr; checksum_verification_event &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_event_sd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event_sd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_verification_event
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStatereceive
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
</UL>

<P><STRONG><a name="[157]"></a>check_serial_no_server</STRONG> (ARM, 168 bytes, Stack size 48 bytes, tcp_client_hb.o(i.check_serial_no_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = check_serial_no_server &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_receive
</UL>

<P><STRONG><a name="[111]"></a>check_status_lumi</STRONG> (ARM, 412 bytes, Stack size 48 bytes, bio.o(i.check_status_lumi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_database
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_database
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
</UL>

<P><STRONG><a name="[15d]"></a>check_user_bio</STRONG> (ARM, 100 bytes, Stack size 16 bytes, bio.o(i.check_user_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = check_user_bio &rArr; read_user_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[156]"></a>checkcrc_server</STRONG> (ARM, 160 bytes, Stack size 56 bytes, tcp_client_hb.o(i.checkcrc_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = checkcrc_server &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_receive
</UL>

<P><STRONG><a name="[152]"></a>checksum_verification</STRONG> (ARM, 88 bytes, Stack size 0 bytes, telnet_server.o(i.checksum_verification))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_protocol
</UL>

<P><STRONG><a name="[15a]"></a>checksum_verification_event</STRONG> (ARM, 160 bytes, Stack size 56 bytes, tcp_client_event.o(i.checksum_verification_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = checksum_verification_event &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_receive
</UL>

<P><STRONG><a name="[173]"></a>chk_timeout</STRONG> (ARM, 40 bytes, Stack size 0 bytes, timer.o(i.chk_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pchar
</UL>

<P><STRONG><a name="[1ba]"></a>clear_keyposition</STRONG> (ARM, 64 bytes, Stack size 0 bytes, task_management.o(i.clear_keyposition))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
</UL>

<P><STRONG><a name="[326]"></a>compare_date</STRONG> (ARM, 220 bytes, Stack size 12 bytes, common_func.o(i.compare_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compare_date
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
</UL>

<P><STRONG><a name="[15e]"></a>crc_calculation</STRONG> (ARM, 140 bytes, Stack size 48 bytes, telnet_server.o(i.crc_calculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = crc_calculation &rArr; tcpconfig_protocol_send &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpconfig_protocol_send
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_info
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Connection_confiq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[160]"></a>crc_calculation_client</STRONG> (ARM, 368 bytes, Stack size 56 bytes, tcp_client_hb.o(i.crc_calculation_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = crc_calculation_client &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_hb_protocol_packet
</UL>

<P><STRONG><a name="[161]"></a>crc_calculation_client_event</STRONG> (ARM, 128 bytes, Stack size 56 bytes, tcp_client_event.o(i.crc_calculation_client_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = crc_calculation_client_event &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_packet
</UL>

<P><STRONG><a name="[162]"></a>crc_calculation_fw</STRONG> (ARM, 136 bytes, Stack size 40 bytes, telnet_server.o(i.crc_calculation_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = crc_calculation_fw &rArr; read_boot_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_boot_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
</UL>

<P><STRONG><a name="[164]"></a>create_database</STRONG> (ARM, 400 bytes, Stack size 48 bytes, bio.o(i.create_database))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = create_database &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_status_lumi
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
</UL>

<P><STRONG><a name="[165]"></a>create_keyevents</STRONG> (ARM, 880 bytes, Stack size 56 bytes, mci_menu.o(i.create_keyevents))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = create_keyevents &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_keyevents_sd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>date_time1</STRONG> (ARM, 468 bytes, Stack size 40 bytes, clock_calndr.o(i.date_time1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = date_time1 &rArr; set_date &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_str
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
</UL>

<P><STRONG><a name="[c1]"></a>dc_voltage</STRONG> (ARM, 56 bytes, Stack size 24 bytes, ac_dc_volt.o(i.dc_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dc_voltage &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>

<P><STRONG><a name="[c3]"></a>delay</STRONG> (ARM, 88 bytes, Stack size 16 bytes, main.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320 + Unknown Stack Size
<LI>Call Chain = delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reset_feed
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienthbTask
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwTask
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventTask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_upload_func
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_keyaccess
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_invalid_login
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_menu
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_key_no
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrong_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_card
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign_bio
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_identity
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bio_verification
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrong_unauth_key_check
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnewkeys
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Identity
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_cardreader
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_command
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_userrecord
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user_details
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_database
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_database
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_status_lumi
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chage_bioflag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_i2c_cmd
</UL>

<P><STRONG><a name="[d9]"></a>delete_alluser</STRONG> (ARM, 208 bytes, Stack size 16 bytes, bio.o(i.delete_alluser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = delete_alluser &rArr; set_workdb &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_database
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_database
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
</UL>

<P><STRONG><a name="[175]"></a>delete_backup_sector</STRONG> (ARM, 56 bytes, Stack size 8 bytes, mci_menu.o(i.delete_backup_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delete_backup_sector &rArr; SectorErase &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftask_allign
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign_bio
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign
</UL>

<P><STRONG><a name="[174]"></a>delete_database</STRONG> (ARM, 388 bytes, Stack size 48 bytes, bio.o(i.delete_database))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = delete_database &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_status_lumi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
</UL>

<P><STRONG><a name="[176]"></a>delete_enrollment</STRONG> (ARM, 920 bytes, Stack size 112 bytes, bio.o(i.delete_enrollment))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + Unknown Stack Size
<LI>Call Chain = delete_enrollment &rArr; delete_user_details &rArr; set_workdb &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_userenroll
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_userrecord
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user_details
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
</UL>

<P><STRONG><a name="[178]"></a>delete_task</STRONG> (ARM, 100 bytes, Stack size 16 bytes, protocol_comm.o(i.delete_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = delete_task &rArr; write_task_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_task_sd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[179]"></a>delete_user</STRONG> (ARM, 152 bytes, Stack size 16 bytes, protocol_comm.o(i.delete_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = delete_user &rArr; write_user_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[177]"></a>delete_user_details</STRONG> (ARM, 72 bytes, Stack size 40 bytes, bio.o(i.delete_user_details))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = delete_user_details &rArr; set_workdb &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chage_bioflag
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
</UL>

<P><STRONG><a name="[17a]"></a>delete_user_sector</STRONG> (ARM, 56 bytes, Stack size 8 bytes, mci_menu.o(i.delete_user_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delete_user_sector &rArr; SectorErase &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign_bio
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign
</UL>

<P><STRONG><a name="[10b]"></a>delete_userrecord</STRONG> (ARM, 412 bytes, Stack size 56 bytes, bio.o(i.delete_userrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = delete_userrecord &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bio_verification
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[17b]"></a>dhcpAddOption</STRONG> (ARM, 228 bytes, Stack size 32 bytes, dhcp_common.o(i.dhcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcpAddOption
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[17c]"></a>dhcpClientChangeState</STRONG> (ARM, 112 bytes, Stack size 24 bytes, dhcp_client_misc.o(i.dhcpClientChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcpClientChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>

<P><STRONG><a name="[17f]"></a>dhcpClientCheckTimeout</STRONG> (ARM, 116 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientCheckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcpClientCheckTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
</UL>

<P><STRONG><a name="[180]"></a>dhcpClientComputeElapsedTime</STRONG> (ARM, 84 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientComputeElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = dhcpClientComputeElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
</UL>

<P><STRONG><a name="[181]"></a>dhcpClientDumpConfig</STRONG> (ARM, 716 bytes, Stack size 32 bytes, dhcp_client_misc.o(i.dhcpClientDumpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dhcpClientDumpConfig &rArr; write_system_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[182]"></a>dhcpClientGetDefaultSettings</STRONG> (ARM, 64 bytes, Stack size 8 bytes, dhcp_client.o(i.dhcpClientGetDefaultSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpClientGetDefaultSettings
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>dhcpClientInit</STRONG> (ARM, 116 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcpClientInit &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>dhcpClientLinkChangeEvent</STRONG> (ARM, 148 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dhcpClientLinkChangeEvent &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderStartProbing
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[188]"></a>dhcpClientParseAck</STRONG> (ARM, 1256 bytes, Stack size 64 bytes, dhcp_client_misc.o(i.dhcpClientParseAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dhcpClientParseAck &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderStartProbing
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[18c]"></a>dhcpClientParseNak</STRONG> (ARM, 300 bytes, Stack size 32 bytes, dhcp_client_misc.o(i.dhcpClientParseNak))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = dhcpClientParseNak &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderStartProbing
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[18d]"></a>dhcpClientParseOffer</STRONG> (ARM, 268 bytes, Stack size 32 bytes, dhcp_client_misc.o(i.dhcpClientParseOffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dhcpClientParseOffer &rArr; dhcpClientChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
</UL>

<P><STRONG><a name="[18]"></a>dhcpClientProcessMessage</STRONG> (ARM, 328 bytes, Stack size 40 bytes, dhcp_client_misc.o(i.dhcpClientProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = dhcpClientProcessMessage &rArr; dhcpClientParseAck &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp_client.o(i.dhcpClientStart)
</UL>
<P><STRONG><a name="[186]"></a>dhcpClientResetConfig</STRONG> (ARM, 132 bytes, Stack size 8 bytes, dhcp_client_misc.o(i.dhcpClientResetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
</UL>

<P><STRONG><a name="[18e]"></a>dhcpClientSendDecline</STRONG> (ARM, 500 bytes, Stack size 104 bytes, dhcp_client_misc.o(i.dhcpClientSendDecline))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[192]"></a>dhcpClientSendDiscover</STRONG> (ARM, 500 bytes, Stack size 104 bytes, dhcp_client_misc.o(i.dhcpClientSendDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
</UL>

<P><STRONG><a name="[193]"></a>dhcpClientSendRequest</STRONG> (ARM, 724 bytes, Stack size 104 bytes, dhcp_client_misc.o(i.dhcpClientSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[194]"></a>dhcpClientStart</STRONG> (ARM, 132 bytes, Stack size 16 bytes, dhcp_client.o(i.dhcpClientStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcpClientStart &rArr; udpAttachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>dhcpClientStateBound</STRONG> (ARM, 108 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateBound))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcpClientStateBound &rArr; dhcpClientChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[197]"></a>dhcpClientStateInit</STRONG> (ARM, 92 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInit &rArr; netGetRandRange &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[199]"></a>dhcpClientStateInitReboot</STRONG> (ARM, 92 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateInitReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInitReboot &rArr; netGetRandRange &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[19a]"></a>dhcpClientStateProbing</STRONG> (ARM, 216 bytes, Stack size 24 bytes, dhcp_client_fsm.o(i.dhcpClientStateProbing))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderStartProbing
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[19b]"></a>dhcpClientStateRebinding</STRONG> (ARM, 224 bytes, Stack size 24 bytes, dhcp_client_fsm.o(i.dhcpClientStateRebinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebinding &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderStartProbing
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[19d]"></a>dhcpClientStateRebooting</STRONG> (ARM, 244 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRebooting))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebooting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[19e]"></a>dhcpClientStateRenewing</STRONG> (ARM, 204 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRenewing))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRenewing &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[19f]"></a>dhcpClientStateRequesting</STRONG> (ARM, 244 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRequesting))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[1a0]"></a>dhcpClientStateSelecting</STRONG> (ARM, 172 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateSelecting))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateSelecting &rArr; dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[1a1]"></a>dhcpClientTick</STRONG> (ARM, 240 bytes, Stack size 8 bytes, dhcp_client_misc.o(i.dhcpClientTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = dhcpClientTick &rArr; dhcpClientStateRebinding &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[18b]"></a>dhcpGetOption</STRONG> (ARM, 172 bytes, Stack size 8 bytes, dhcp_common.o(i.dhcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>

<P><STRONG><a name="[1a2]"></a>diagnostics</STRONG> (ARM, 240 bytes, Stack size 16 bytes, util_menu.o(i.diagnostics))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = diagnostics &rArr; Check_cardreader &rArr; regular_card &rArr; send_i2c_cmd &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_keypad
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_cardreader
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
</UL>

<P><STRONG><a name="[1a3]"></a>dnsCompareEncodedName</STRONG> (ARM, 508 bytes, Stack size 80 bytes, dns_common.o(i.dnsCompareEncodedName))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = dnsCompareEncodedName &rArr;  dnsCompareEncodedName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareEncodedName
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareRecord
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseKnownAnRecord
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareEncodedName
</UL>

<P><STRONG><a name="[1a4]"></a>dnsCompareName</STRONG> (ARM, 328 bytes, Stack size 48 bytes, dns_common.o(i.dnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = dnsCompareName &rArr;  dnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
</UL>

<P><STRONG><a name="[1a5]"></a>dnsCreateEntry</STRONG> (ARM, 144 bytes, Stack size 24 bytes, dns_cache.o(i.dnsCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dnsCreateEntry &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[1a6]"></a>dnsDeleteEntry</STRONG> (ARM, 68 bytes, Stack size 8 bytes, dns_cache.o(i.dnsDeleteEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
</UL>

<P><STRONG><a name="[1b0]"></a>dnsEncodeName</STRONG> (ARM, 220 bytes, Stack size 4 bytes, dns_common.o(i.dnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsEncodeName
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
</UL>

<P><STRONG><a name="[1a8]"></a>dnsFindEntry</STRONG> (ARM, 188 bytes, Stack size 32 bytes, dns_cache.o(i.dnsFindEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dnsFindEntry &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[1a9]"></a>dnsFlushCache</STRONG> (ARM, 84 bytes, Stack size 16 bytes, dns_cache.o(i.dnsFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dnsFlushCache &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[1aa]"></a>dnsInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, dns_cache.o(i.dnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1ab]"></a>dnsParseName</STRONG> (ARM, 352 bytes, Stack size 40 bytes, dns_common.o(i.dnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = dnsParseName &rArr;  dnsParseName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsProcessResponse
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCheckDuplicateRecord
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseKnownAnRecord
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderGenerateAdditionalRecords
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
</UL>

<P><STRONG><a name="[19]"></a>dnsProcessResponse</STRONG> (ARM, 864 bytes, Stack size 56 bytes, dns_client.o(i.dnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dnsProcessResponse &rArr; dnsCompareName &rArr;  dnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns_client.o(i.dnsResolve)
</UL>
<P><STRONG><a name="[1ac]"></a>dnsResolve</STRONG> (ARM, 316 bytes, Stack size 32 bytes, dns_client.o(i.dnsResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[1af]"></a>dnsSendQuery</STRONG> (ARM, 512 bytes, Stack size 80 bytes, dns_client.o(i.dnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[1b1]"></a>dnsTick</STRONG> (ARM, 380 bytes, Stack size 24 bytes, dns_cache.o(i.dnsTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = dnsTick &rArr; nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[1b3]"></a>dow1</STRONG> (ARM, 144 bytes, Stack size 32 bytes, common_func.o(i.dow1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dow1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
</UL>

<P><STRONG><a name="[21]"></a>dp83848DisableIrq</STRONG> (ARM, 44 bytes, Stack size 8 bytes, dp83848_driver.o(i.dp83848DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dp83848DisableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp83848_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>dp83848DumpPhyReg</STRONG> (ARM, 32 bytes, Stack size 0 bytes, dp83848_driver.o(i.dp83848DumpPhyReg))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848Init
</UL>

<P><STRONG><a name="[20]"></a>dp83848EnableIrq</STRONG> (ARM, 44 bytes, Stack size 8 bytes, dp83848_driver.o(i.dp83848EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dp83848EnableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp83848_driver.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>dp83848EventHandler</STRONG> (ARM, 184 bytes, Stack size 16 bytes, dp83848_driver.o(i.dp83848EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = dp83848EventHandler &rArr; nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; dhcpClientLinkChangeEvent &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848ReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp83848_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>dp83848Init</STRONG> (ARM, 196 bytes, Stack size 8 bytes, dp83848_driver.o(i.dp83848Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dp83848Init &rArr; dp83848WritePhyReg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848WritePhyReg
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848ReadPhyReg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848DumpPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp83848_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>dp83848ReadPhyReg</STRONG> (ARM, 104 bytes, Stack size 16 bytes, dp83848_driver.o(i.dp83848ReadPhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dp83848ReadPhyReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848Tick
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848EventHandler
</UL>

<P><STRONG><a name="[1f]"></a>dp83848Tick</STRONG> (ARM, 128 bytes, Stack size 16 bytes, dp83848_driver.o(i.dp83848Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dp83848Tick &rArr; dp83848ReadPhyReg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848ReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp83848_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>dp83848WritePhyReg</STRONG> (ARM, 104 bytes, Stack size 16 bytes, dp83848_driver.o(i.dp83848WritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dp83848WritePhyReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848Init
</UL>

<P><STRONG><a name="[1b9]"></a>emerg_remove_return_key</STRONG> (ARM, 2624 bytes, Stack size 192 bytes, key_menu.o(i.emerg_remove_return_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = emerg_remove_return_key &rArr; alarm_handler &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_key_log
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_key_sd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_on
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyposition
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_keyaccess
</UL>

<P><STRONG><a name="[1bb]"></a>emergency_keyaccess</STRONG> (ARM, 220 bytes, Stack size 16 bytes, key_menu.o(i.emergency_keyaccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = emergency_keyaccess &rArr; emerg_remove_return_key &rArr; alarm_handler &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
</UL>

<P><STRONG><a name="[d7]"></a>enter_digits</STRONG> (ARM, 896 bytes, Stack size 64 bytes, msg_menu.o(i.enter_digits))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delete
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_char
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_tcp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_hb
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_cliq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip1
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operating_parameter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[1be]"></a>eraseboot_sdcard</STRONG> (ARM, 44 bytes, Stack size 8 bytes, mci_menu.o(i.eraseboot_sdcard))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eraseboot_sdcard &rArr; SectorErase &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>ethAcceptMacAddr</STRONG> (ARM, 196 bytes, Stack size 24 bytes, ethernet.o(i.ethAcceptMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethAcceptMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[136]"></a>ethAllocBuffer</STRONG> (ARM, 60 bytes, Stack size 24 bytes, ethernet.o(i.ethAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
</UL>

<P><STRONG><a name="[1c2]"></a>ethCalcCrc</STRONG> (ARM, 108 bytes, Stack size 8 bytes, ethernet_misc.o(i.ethCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
</UL>

<P><STRONG><a name="[1ce]"></a>ethCalcCrcEx</STRONG> (ARM, 252 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethCalcCrcEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethCalcCrcEx
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[1c1]"></a>ethCheckCrc</STRONG> (ARM, 160 bytes, Stack size 20 bytes, ethernet_misc.o(i.ethCheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ethCheckCrc &rArr; ethCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1c3]"></a>ethCheckDestAddr</STRONG> (ARM, 200 bytes, Stack size 32 bytes, ethernet_misc.o(i.ethCheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ethCheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1c4]"></a>ethDropMacAddr</STRONG> (ARM, 164 bytes, Stack size 24 bytes, ethernet.o(i.ethDropMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethDropMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[1c9]"></a>ethDumpHeader</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ethernet.o(i.ethDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1c5]"></a>ethInit</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ethernet.o(i.ethInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ethInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1c6]"></a>ethPadFrame</STRONG> (ARM, 92 bytes, Stack size 24 bytes, ethernet_misc.o(i.ethPadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ethPadFrame &rArr; netBufferAppend
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[1c8]"></a>ethProcessFrame</STRONG> (ARM, 432 bytes, Stack size 48 bytes, ethernet.o(i.ethProcessFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateErrorStats
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDumpHeader
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>

<P><STRONG><a name="[139]"></a>ethSendFrame</STRONG> (ARM, 412 bytes, Stack size 64 bytes, ethernet.o(i.ethSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ethSendFrame &rArr; nicSendPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrcEx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDumpHeader
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[1ca]"></a>ethUpdateErrorStats</STRONG> (ARM, 100 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1cb]"></a>ethUpdateInStats</STRONG> (ARM, 48 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethUpdateInStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ethUpdateInStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1cd]"></a>ethUpdateOutStats</STRONG> (ARM, 52 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethUpdateOutStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ethUpdateOutStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[95]"></a>ferror</STRONG> (ARM, 12 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file (via Veneer)
</UL>

<P><STRONG><a name="[c9]"></a>find_string</STRONG> (ARM, 112 bytes, Stack size 0 bytes, lcd.o(i.find_string))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_int
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_str
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_keypad
</UL>

<P><STRONG><a name="[1d0]"></a>find_user_sd</STRONG> (ARM, 108 bytes, Stack size 16 bytes, login_menu.o(i.find_user_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = find_user_sd &rArr; read_user_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
</UL>

<P><STRONG><a name="[1d1]"></a>find_user_sd1</STRONG> (ARM, 108 bytes, Stack size 16 bytes, login_menu.o(i.find_user_sd1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = find_user_sd1 &rArr; read_user_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
</UL>

<P><STRONG><a name="[1d2]"></a>finger_module_menu</STRONG> (ARM, 316 bytes, Stack size 16 bytes, bio.o(i.finger_module_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = finger_module_menu &rArr; add_enrollment &rArr; add_enrollment_user &rArr; getresult_identy &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_command
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
</UL>

<P><STRONG><a name="[1d4]"></a>format_ip</STRONG> (ARM, 64 bytes, Stack size 24 bytes, msg_menu.o(i.format_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = format_ip &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[13]"></a>fputc</STRONG> (ARM, 8 bytes, Stack size 0 bytes, debug.o(i.fputc))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1d5]"></a>fw_download_sd</STRONG> (ARM, 956 bytes, Stack size 120 bytes, telnet_server.o(i.fw_download_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = fw_download_sd &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_boot_sd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation_fw
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ftp_char
</UL>

<P><STRONG><a name="[1d9]"></a>fw_upload_func</STRONG> (ARM, 256 bytes, Stack size 16 bytes, aka_sys.o(i.fw_upload_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = fw_upload_func &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
</UL>

<P><STRONG><a name="[1da]"></a>getHostByName</STRONG> (ARM, 396 bytes, Stack size 40 bytes, socket.o(i.getHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp (via Veneer)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateConnect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit
</UL>

<P><STRONG><a name="[1df]"></a>get_Connection_confiq</STRONG> (ARM, 224 bytes, Stack size 40 bytes, telnet_server.o(i.get_Connection_confiq))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = get_Connection_confiq &rArr; crc_calculation &rArr; tcpconfig_protocol_send &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
</UL>

<P><STRONG><a name="[1ed]"></a>get_block_value</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2c.o(i.get_block_value))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_led_onoff
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greenled_onoff
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regular_card
</UL>

<P><STRONG><a name="[1e0]"></a>get_doy_dow</STRONG> (ARM, 96 bytes, Stack size 24 bytes, clock_calndr.o(i.get_doy_dow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = get_doy_dow &rArr; get_ticks_value &rArr; mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
</UL>

<P><STRONG><a name="[1e2]"></a>get_firmware_info</STRONG> (ARM, 616 bytes, Stack size 32 bytes, telnet_server.o(i.get_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = get_firmware_info &rArr; crc_calculation &rArr; tcpconfig_protocol_send &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
</UL>

<P><STRONG><a name="[2ae]"></a>get_i2c_value</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2c.o(i.get_i2c_value))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_led_onoff
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regular_card
</UL>

<P><STRONG><a name="[1e3]"></a>get_intvalue</STRONG> (ARM, 64 bytes, Stack size 24 bytes, mci_menu.o(i.get_intvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_intvalue &rArr; hex_val &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_val
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
</UL>

<P><STRONG><a name="[2aa]"></a>get_length</STRONG> (ARM, 232 bytes, Stack size 0 bytes, bio.o(i.get_length))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
</UL>

<P><STRONG><a name="[b9]"></a>get_menu_key</STRONG> (ARM, 64 bytes, Stack size 8 bytes, common_func.o(i.get_menu_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = get_menu_key &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_upload_func
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_keyaccess
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_tcp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_hb
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_cliq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operating_parameter
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[1e5]"></a>get_menu_key1</STRONG> (ARM, 72 bytes, Stack size 8 bytes, common_func.o(i.get_menu_key1))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = get_menu_key1 &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
</UL>

<P><STRONG><a name="[150]"></a>get_protocol_length</STRONG> (ARM, 252 bytes, Stack size 0 bytes, telnet_server.o(i.get_protocol_length))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_protocol
</UL>

<P><STRONG><a name="[1e6]"></a>get_sec_time_value</STRONG> (ARM, 96 bytes, Stack size 24 bytes, clock_calndr.o(i.get_sec_time_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = get_sec_time_value &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[1e1]"></a>get_ticks_value</STRONG> (ARM, 104 bytes, Stack size 56 bytes, clock_calndr.o(i.get_ticks_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_ticks_value &rArr; mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_year
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sec
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_month
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_min
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dayofmonth
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRand
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_doy_dow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwSend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_hb_protocol_packet
</UL>

<P><STRONG><a name="[168]"></a>get_timestamp</STRONG> (ARM, 892 bytes, Stack size 96 bytes, common_func.o(i.get_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = get_timestamp &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dow1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
</UL>

<P><STRONG><a name="[10e]"></a>getresult_identy</STRONG> (ARM, 424 bytes, Stack size 48 bytes, bio.o(i.getresult_identy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = getresult_identy &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_status_lumi
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
</UL>

<P><STRONG><a name="[e2]"></a>greenled_onoff</STRONG> (ARM, 48 bytes, Stack size 16 bytes, led.o(i.greenled_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = greenled_onoff &rArr; send_i2c_cmd &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_i2c_cmd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_value
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_card
</UL>

<P><STRONG><a name="[1ef]"></a>handle_ftp_char</STRONG> (ARM, 148 bytes, Stack size 8 bytes, telnet_server.o(i.handle_ftp_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = handle_ftp_char &rArr; fw_download_sd &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwreceive
</UL>

<P><STRONG><a name="[1f0]"></a>handle_hb_protocol_packet</STRONG> (ARM, 452 bytes, Stack size 16 bytes, tcp_client_hb.o(i.handle_hb_protocol_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = handle_hb_protocol_packet &rArr; EncyptPIAMPacket_hb &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation_client
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket_hb
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dc_adc_ch
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ac_adc_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateSend
</UL>

<P><STRONG><a name="[ff]"></a>handle_protocol_ble</STRONG> (ARM, 320 bytes, Stack size 8 bytes, uart.o(i.handle_protocol_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = handle_protocol_ble &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>

<P><STRONG><a name="[153]"></a>handle_protocol_configpacket</STRONG> (ARM, 1552 bytes, Stack size 64 bytes, telnet_server.o(i.handle_protocol_configpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = handle_protocol_configpacket &rArr;  writedefaults_sdcard (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_sd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mac_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_time
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_info
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Connection_confiq
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_protocol
</UL>

<P><STRONG><a name="[158]"></a>handle_protocol_configpacket_event</STRONG> (ARM, 10108 bytes, Stack size 104 bytes, tcp_client_hb.o(i.handle_protocol_configpacket_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_task_sd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_key_sd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_sd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_user_bio
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_time
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_status
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_user
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_task
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_task
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_date_time
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sec_time_value
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation_client
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket_hb
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_receive
</UL>

<P><STRONG><a name="[1fb]"></a>handle_protocol_packet</STRONG> (ARM, 480 bytes, Stack size 16 bytes, tcp_client_event.o(i.handle_protocol_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = handle_protocol_packet &rArr; EncyptPIAMPacket &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event_sd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation_client_event
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
</UL>

<P><STRONG><a name="[fe]"></a>handle_protocol_uart0</STRONG> (ARM, 44 bytes, Stack size 0 bytes, uart.o(i.handle_protocol_uart0))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[1e4]"></a>hex_val</STRONG> (ARM, 80 bytes, Stack size 16 bytes, mci_menu.o(i.hex_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hex_val &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isxdigit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_intvalue
</UL>

<P><STRONG><a name="[246]"></a>i2c_lpc_init</STRONG> (ARM, 144 bytes, Stack size 0 bytes, i2c.o(i.i2c_lpc_init))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>icmpDumpEchoMessage</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icmp.o(i.icmpDumpEchoMessage))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[20a]"></a>icmpDumpErrorMessage</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icmp.o(i.icmpDumpErrorMessage))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
</UL>

<P><STRONG><a name="[207]"></a>icmpDumpMessage</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icmp.o(i.icmpDumpMessage))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[1ff]"></a>icmpProcessEchoRequest</STRONG> (ARM, 556 bytes, Stack size 104 bytes, icmp.o(i.icmpProcessEchoRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpUpdateOutStats
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpDumpEchoMessage
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[206]"></a>icmpProcessMessage</STRONG> (ARM, 176 bytes, Stack size 32 bytes, icmp.o(i.icmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = icmpProcessMessage &rArr; icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpUpdateInStats
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpDumpMessage
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[209]"></a>icmpSendErrorMessage</STRONG> (ARM, 508 bytes, Stack size 96 bytes, icmp.o(i.icmpSendErrorMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpUpdateOutStats
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpDumpErrorMessage
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[208]"></a>icmpUpdateInStats</STRONG> (ARM, 184 bytes, Stack size 0 bytes, icmp.o(i.icmpUpdateInStats))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[204]"></a>icmpUpdateOutStats</STRONG> (ARM, 184 bytes, Stack size 0 bytes, icmp.o(i.icmpUpdateOutStats))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
</UL>

<P><STRONG><a name="[20b]"></a>ipAddrToString</STRONG> (ARM, 72 bytes, Stack size 16 bytes, ip.o(i.ipAddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ipAddrToString &rArr; ipv4AddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit
</UL>

<P><STRONG><a name="[201]"></a>ipAllocBuffer</STRONG> (ARM, 64 bytes, Stack size 24 bytes, ip.o(i.ipAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
</UL>

<P><STRONG><a name="[20d]"></a>ipCalcChecksum</STRONG> (ARM, 264 bytes, Stack size 4 bytes, ip.o(i.ipCalcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
</UL>

<P><STRONG><a name="[203]"></a>ipCalcChecksumEx</STRONG> (ARM, 276 bytes, Stack size 36 bytes, ip.o(i.ipCalcChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[20e]"></a>ipCalcUpperLayerChecksumEx</STRONG> (ARM, 100 bytes, Stack size 28 bytes, ip.o(i.ipCalcUpperLayerChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ipCalcUpperLayerChecksumEx &rArr; ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
</UL>

<P><STRONG><a name="[324]"></a>ipIsMulticastAddr</STRONG> (ARM, 60 bytes, Stack size 0 bytes, ip.o(i.ipIsMulticastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
</UL>

<P><STRONG><a name="[2fd]"></a>ipIsUnspecifiedAddr</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ip.o(i.ipIsUnspecifiedAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[20f]"></a>ipSelectSourceAddr</STRONG> (ARM, 76 bytes, Stack size 24 bytes, ip.o(i.ipSelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ipSelectSourceAddr &rArr; ipv4SelectSourceAddr &rArr; ipv4GetPrefixLength
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[210]"></a>ipSendDatagram</STRONG> (ARM, 84 bytes, Stack size 32 bytes, ip.o(i.ipSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
</UL>

<P><STRONG><a name="[1db]"></a>ipStringToAddr</STRONG> (ARM, 76 bytes, Stack size 16 bytes, ip.o(i.ipStringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipStringToAddr &rArr; ipv4StringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[212]"></a>ipv4AddRouterAlertOption</STRONG> (ARM, 104 bytes, Stack size 24 bytes, ipv4_misc.o(i.ipv4AddRouterAlertOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv4AddRouterAlertOption
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[20c]"></a>ipv4AddrToString</STRONG> (ARM, 80 bytes, Stack size 32 bytes, ipv4.o(i.ipv4AddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ipv4AddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
</UL>

<P><STRONG><a name="[213]"></a>ipv4CheckDestAddr</STRONG> (ARM, 204 bytes, Stack size 20 bytes, ipv4_misc.o(i.ipv4CheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ipv4CheckDestAddr &rArr; ipv4IsBroadcastAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[214]"></a>ipv4CheckSourceAddr</STRONG> (ARM, 64 bytes, Stack size 12 bytes, ipv4_misc.o(i.ipv4CheckSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4CheckSourceAddr &rArr; ipv4IsBroadcastAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[218]"></a>ipv4DumpHeader</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ipv4.o(i.ipv4DumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[228]"></a>ipv4DumpHoleList</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ipv4_frag.o(i.ipv4DumpHoleList))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[215]"></a>ipv4FindHole</STRONG> (ARM, 36 bytes, Stack size 16 bytes, ipv4_frag.o(i.ipv4FindHole))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4FindHole
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[216]"></a>ipv4FlushFragQueue</STRONG> (ARM, 60 bytes, Stack size 16 bytes, ipv4_frag.o(i.ipv4FlushFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ipv4FlushFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[217]"></a>ipv4FragTick</STRONG> (ARM, 228 bytes, Stack size 40 bytes, ipv4_frag.o(i.ipv4FragTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ipv4FragTick &rArr; icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[219]"></a>ipv4FragmentDatagram</STRONG> (ARM, 336 bytes, Stack size 72 bytes, ipv4_frag.o(i.ipv4FragmentDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[229]"></a>ipv4GetAddrScope</STRONG> (ARM, 116 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4GetAddrScope))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
</UL>

<P><STRONG><a name="[288]"></a>ipv4GetBroadcastAddr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4GetBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[21b]"></a>ipv4GetPrefixLength</STRONG> (ARM, 80 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4GetPrefixLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4GetPrefixLength
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
</UL>

<P><STRONG><a name="[21c]"></a>ipv4Init</STRONG> (ARM, 116 bytes, Stack size 16 bytes, ipv4.o(i.ipv4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[12f]"></a>ipv4IsBroadcastAddr</STRONG> (ARM, 144 bytes, Stack size 4 bytes, ipv4_misc.o(i.ipv4IsBroadcastAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[22a]"></a>ipv4IsLocalHostAddr</STRONG> (ARM, 152 bytes, Stack size 12 bytes, ipv4_misc.o(i.ipv4IsLocalHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ipv4IsLocalHostAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[22b]"></a>ipv4IsOnLink</STRONG> (ARM, 100 bytes, Stack size 4 bytes, ipv4_misc.o(i.ipv4IsOnLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ipv4IsOnLink
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCheckSourceAddr
</UL>

<P><STRONG><a name="[130]"></a>ipv4IsTentativeAddr</STRONG> (ARM, 88 bytes, Stack size 4 bytes, ipv4_misc.o(i.ipv4IsTentativeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ipv4IsTentativeAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[21d]"></a>ipv4JoinMulticastGroup</STRONG> (ARM, 268 bytes, Stack size 40 bytes, ipv4.o(i.ipv4JoinMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ipv4JoinMulticastGroup &rArr; ethDropMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsInit
</UL>

<P><STRONG><a name="[21f]"></a>ipv4LinkChangeEvent</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ipv4.o(i.ipv4LinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ipv4LinkChangeEvent &rArr; dhcpClientLinkChangeEvent &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[21e]"></a>ipv4MapMulticastAddrToMac</STRONG> (ARM, 96 bytes, Stack size 8 bytes, ipv4_misc.o(i.ipv4MapMulticastAddrToMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv4MapMulticastAddrToMac
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[220]"></a>ipv4ProcessDatagram</STRONG> (ARM, 424 bytes, Stack size 56 bytes, ipv4.o(i.ipv4ProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[1cc]"></a>ipv4ProcessPacket</STRONG> (ARM, 516 bytes, Stack size 48 bytes, ipv4.o(i.ipv4ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[225]"></a>ipv4ReassembleDatagram</STRONG> (ARM, 1076 bytes, Stack size 64 bytes, ipv4_frag.o(i.ipv4ReassembleDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHoleList
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[226]"></a>ipv4SearchFragQueue</STRONG> (ARM, 456 bytes, Stack size 40 bytes, ipv4_frag.o(i.ipv4SearchFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ipv4SearchFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHoleList
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[22c]"></a>ipv4SelectDefaultGateway</STRONG> (ARM, 112 bytes, Stack size 8 bytes, ipv4_misc.o(i.ipv4SelectDefaultGateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv4SelectDefaultGateway
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[13b]"></a>ipv4SelectSourceAddr</STRONG> (ARM, 620 bytes, Stack size 56 bytes, ipv4_misc.o(i.ipv4SelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ipv4SelectSourceAddr &rArr; ipv4GetPrefixLength
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetPrefixLength
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetAddrScope
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
</UL>

<P><STRONG><a name="[205]"></a>ipv4SendDatagram</STRONG> (ARM, 152 bytes, Stack size 48 bytes, ipv4.o(i.ipv4SendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
</UL>

<P><STRONG><a name="[21a]"></a>ipv4SendPacket</STRONG> (ARM, 1012 bytes, Stack size 64 bytes, ipv4.o(i.ipv4SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectDefaultGateway
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsOnLink
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsLocalHostAddr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[22d]"></a>ipv4SetDefaultGateway</STRONG> (ARM, 36 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetDefaultGateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv4SetDefaultGateway &rArr; ipv4SetDefaultGatewayEx
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGatewayEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22e]"></a>ipv4SetDefaultGatewayEx</STRONG> (ARM, 112 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetDefaultGatewayEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4SetDefaultGatewayEx
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
</UL>

<P><STRONG><a name="[22f]"></a>ipv4SetDnsServer</STRONG> (ARM, 104 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetDnsServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4SetDnsServer
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>ipv4SetHostAddr</STRONG> (ARM, 36 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ipv4SetHostAddr &rArr; ipv4SetHostAddrEx &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[231]"></a>ipv4SetHostAddrEx</STRONG> (ARM, 156 bytes, Stack size 24 bytes, ipv4.o(i.ipv4SetHostAddrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ipv4SetHostAddrEx &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderStartProbing
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
</UL>

<P><STRONG><a name="[232]"></a>ipv4SetSubnetMask</STRONG> (ARM, 36 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetSubnetMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv4SetSubnetMask &rArr; ipv4SetSubnetMaskEx
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMaskEx
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[233]"></a>ipv4SetSubnetMaskEx</STRONG> (ARM, 92 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetSubnetMaskEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4SetSubnetMaskEx
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
</UL>

<P><STRONG><a name="[211]"></a>ipv4StringToAddr</STRONG> (ARM, 228 bytes, Stack size 24 bytes, ipv4.o(i.ipv4StringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv4StringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
</UL>

<P><STRONG><a name="[223]"></a>ipv4UpdateErrorStats</STRONG> (ARM, 84 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[224]"></a>ipv4UpdateInStats</STRONG> (ARM, 48 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4UpdateInStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4UpdateInStats &rArr; ipv4IsBroadcastAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[13a]"></a>ipv4UpdateOutStats</STRONG> (ARM, 48 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4UpdateOutStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4UpdateOutStats &rArr; ipv4IsBroadcastAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[239]"></a>kbd_byte</STRONG> (ARM, 132 bytes, Stack size 0 bytes, keypad.o(i.kbd_byte))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_keypad
</UL>

<P><STRONG><a name="[bf]"></a>key1</STRONG> (ARM, 144 bytes, Stack size 16 bytes, main.o(i.key1))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reset_feed
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienthbTask
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwTask
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventTask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hexavalue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key1
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_tcp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_hb
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_cliq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operating_parameter
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_keys
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_keypad
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_cardreader
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[234]"></a>key_check_2</STRONG> (ARM, 2252 bytes, Stack size 64 bytes, key_menu.o(i.key_check_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = key_check_2 &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_keyevents_sd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dis
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[237]"></a>lcd_back</STRONG> (ARM, 56 bytes, Stack size 0 bytes, lcd.o(i.lcd_back))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hexavalue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delete
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[238]"></a>lcd_byte</STRONG> (ARM, 156 bytes, Stack size 0 bytes, lcd.o(i.lcd_byte))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_keypad
</UL>

<P><STRONG><a name="[235]"></a>lcd_center</STRONG> (ARM, 148 bytes, Stack size 20 bytes, lcd.o(i.lcd_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_center
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[236]"></a>lcd_ch</STRONG> (ARM, 136 bytes, Stack size 0 bytes, lcd.o(i.lcd_ch))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_char
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_center
</UL>

<P><STRONG><a name="[1bc]"></a>lcd_char</STRONG> (ARM, 60 bytes, Stack size 8 bytes, lcd.o(i.lcd_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_char
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hexavalue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delete
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[be]"></a>lcd_clr</STRONG> (ARM, 28 bytes, Stack size 8 bytes, lcd.o(i.lcd_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_clr &rArr; lcd_str
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_upload_func
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_menu
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrong_unauth_key_check
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Identity
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[1bd]"></a>lcd_delete</STRONG> (ARM, 68 bytes, Stack size 12 bytes, lcd.o(i.lcd_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_delete &rArr; lcd_char
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_char
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_back
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hexavalue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip1
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip
</UL>

<P><STRONG><a name="[fd]"></a>lcd_dis</STRONG> (ARM, 44 bytes, Stack size 0 bytes, lcd.o(i.lcd_dis))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bc]"></a>lcd_forward</STRONG> (ARM, 24 bytes, Stack size 0 bytes, lcd.o(i.lcd_forward))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip1
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip
</UL>

<P><STRONG><a name="[13f]"></a>lcd_init</STRONG> (ARM, 188 bytes, Stack size 8 bytes, lcd.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = lcd_init &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>lcd_keypad</STRONG> (ARM, 1568 bytes, Stack size 8 bytes, keypad.o(i.lcd_keypad))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_keypad
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbd_byte
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_Handler
</UL>

<P><STRONG><a name="[b7]"></a>lcd_show</STRONG> (ARM, 56 bytes, Stack size 20 bytes, lcd.o(i.lcd_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lcd_show &rArr; lcd_str
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_upload_func
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_keyaccess
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_menu
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_tcp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_hb
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_cliq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip1
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operating_parameter
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnewkeys
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_keys
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_keypad
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_cardreader
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_command
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_userrecord
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_database
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_database
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[b8]"></a>lcd_show_index</STRONG> (ARM, 84 bytes, Stack size 56 bytes, lcd.o(i.lcd_show_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lcd_show_index &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>

<P><STRONG><a name="[23a]"></a>lcd_show_index_int</STRONG> (ARM, 100 bytes, Stack size 56 bytes, lcd.o(i.lcd_show_index_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lcd_show_index_int &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operating_parameter
</UL>

<P><STRONG><a name="[169]"></a>lcd_show_index_str</STRONG> (ARM, 100 bytes, Stack size 56 bytes, lcd.o(i.lcd_show_index_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lcd_show_index_str &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[bd]"></a>lcd_show_str</STRONG> (ARM, 84 bytes, Stack size 56 bytes, lcd.o(i.lcd_show_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lcd_show_str &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnewkeys
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_cardreader
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>

<P><STRONG><a name="[cb]"></a>lcd_str</STRONG> (ARM, 136 bytes, Stack size 16 bytes, lcd.o(i.lcd_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_str
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_menu
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_key_no
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftask_allign
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign_bio
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bio_verification
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrong_unauth_key_check
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_int
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_tcp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_hb
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_cliq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip1
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operating_parameter
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_str
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Identity
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_keypad
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user_details
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chage_bioflag
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>

<P><STRONG><a name="[ce]"></a>lock_on</STRONG> (ARM, 44 bytes, Stack size 0 bytes, door.o(i.lock_on))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
</UL>

<P><STRONG><a name="[241]"></a>lpc23xxEthCalcCrc</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lpc23xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthUpdateMacAddrFilter
</UL>

<P><STRONG><a name="[26]"></a>lpc23xxEthDisableIrq</STRONG> (ARM, 96 bytes, Stack size 8 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthDisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lpc23xxEthDisableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>lpc23xxEthEnableIrq</STRONG> (ARM, 96 bytes, Stack size 8 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthEnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lpc23xxEthEnableIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>lpc23xxEthEventHandler</STRONG> (ARM, 88 bytes, Stack size 16 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = lpc23xxEthEventHandler &rArr; lpc23xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>lpc23xxEthInit</STRONG> (ARM, 424 bytes, Stack size 16 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lpc23xxEthInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthInitGpio
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthInitDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>lpc23xxEthInitDesc</STRONG> (ARM, 208 bytes, Stack size 0 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthInitDesc))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthInit
</UL>

<P><STRONG><a name="[23c]"></a>lpc23xxEthInitGpio</STRONG> (ARM, 84 bytes, Stack size 0 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthInitGpio))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthInit
</UL>

<P><STRONG><a name="[1a]"></a>lpc23xxEthIrqHandler</STRONG> (ARM, 176 bytes, Stack size 40 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lpc23xxEthIrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(i.lpc23xxEthInit)
</UL>
<P><STRONG><a name="[2c]"></a>lpc23xxEthReadPhyReg</STRONG> (ARM, 128 bytes, Stack size 4 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthReadPhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpc23xxEthReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[23b]"></a>lpc23xxEthReceivePacket</STRONG> (ARM, 168 bytes, Stack size 40 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = lpc23xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthEventHandler
</UL>

<P><STRONG><a name="[28]"></a>lpc23xxEthSendPacket</STRONG> (ARM, 260 bytes, Stack size 32 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lpc23xxEthSendPacket &rArr; netBufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>lpc23xxEthTick</STRONG> (ARM, 84 bytes, Stack size 8 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lpc23xxEthTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>lpc23xxEthUpdateMacAddrFilter</STRONG> (ARM, 176 bytes, Stack size 32 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lpc23xxEthUpdateMacAddrFilter &rArr; lpc23xxEthCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthCalcCrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>lpc23xxEthUpdateMacConfig</STRONG> (ARM, 160 bytes, Stack size 0 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthUpdateMacConfig))
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>lpc23xxEthWritePhyReg</STRONG> (ARM, 100 bytes, Stack size 4 bytes, lpc23xx_eth_driver.o(i.lpc23xxEthWritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lpc23xxEthWritePhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc23xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[297]"></a>macAddrToEui64</STRONG> (ARM, 80 bytes, Stack size 0 bytes, ethernet.o(i.macAddrToEui64))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
</UL>

<P><STRONG><a name="[242]"></a>macAddrToString</STRONG> (ARM, 92 bytes, Stack size 32 bytes, ethernet.o(i.macAddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = macAddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>main</STRONG> (ARM, 5012 bytes, Stack size 64 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + Unknown Stack Size
<LI>Call Chain = main &rArr; menu_login &rArr; menu_loginuser &rArr; main_menu_user_task &rArr; user_mykee_task &rArr; wrong_unauth_key_check &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_menu
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRand
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_loginuser
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrong_entry
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftask_allign
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mac_sd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseboot_sdcard
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_keyevents
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_on
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_dis
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_3S_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_identity
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClient_eventInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regular_card
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToString
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_center
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetDefaultSettings
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_user_bio
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bio_verification
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_Start
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_100ms_Start
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;structure_size
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerInit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_init_event
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[140]"></a>main_menu_administrator</STRONG> (ARM, 328 bytes, Stack size 16 bytes, login_menu.o(i.main_menu_administrator))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = main_menu_administrator &rArr; finger_module_menu &rArr; add_enrollment &rArr; add_enrollment_user &rArr; getresult_identy &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_upload_func
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_keyaccess
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_menu
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
</UL>

<P><STRONG><a name="[25a]"></a>main_menu_user_task</STRONG> (ARM, 1312 bytes, Stack size 72 bytes, task_management.o(i.main_menu_user_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = main_menu_user_task &rArr; user_mykee_task &rArr; wrong_unauth_key_check &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_invalid_login
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user_sd1
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrong_entry
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_status
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Trigger_Timeout
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_login_success
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_loginuser
</UL>

<P><STRONG><a name="[25d]"></a>mdnsCheckDuplicateRecord</STRONG> (ARM, 520 bytes, Stack size 64 bytes, mdns_common.o(i.mdnsCheckDuplicateRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mdnsCheckDuplicateRecord &rArr; mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareName
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddNsecRecord
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4ReversePtrRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4AddrRecord
</UL>

<P><STRONG><a name="[25f]"></a>mdnsCheckSourceAddr</STRONG> (ARM, 152 bytes, Stack size 16 bytes, mdns_common.o(i.mdnsCheckSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mdnsCheckSourceAddr &rArr; ipv4IsOnLink
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsOnLink
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsProcessResponse
</UL>

<P><STRONG><a name="[25e]"></a>mdnsCompareName</STRONG> (ARM, 632 bytes, Stack size 72 bytes, mdns_common.o(i.mdnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareName
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareName
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCheckDuplicateRecord
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseQuestion
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseNsRecord
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseAnRecord
</UL>

<P><STRONG><a name="[260]"></a>mdnsCompareRecord</STRONG> (ARM, 448 bytes, Stack size 64 bytes, mdns_common.o(i.mdnsCompareRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mdnsCompareRecord &rArr; dnsCompareEncodedName &rArr;  dnsCompareEncodedName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareEncodedName
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseKnownAnRecord
</UL>

<P><STRONG><a name="[261]"></a>mdnsCreateMessage</STRONG> (ARM, 400 bytes, Stack size 16 bytes, mdns_common.o(i.mdnsCreateMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mdnsCreateMessage &rArr; udpAllocBuffer &rArr; ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsDeleteMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendProbe
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendAnnouncement
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
</UL>

<P><STRONG><a name="[262]"></a>mdnsDeleteMessage</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mdns_common.o(i.mdnsDeleteMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mdnsDeleteMessage &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCreateMessage
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendProbe
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendAnnouncement
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderLinkChangeEvent
</UL>

<P><STRONG><a name="[263]"></a>mdnsEncodeName</STRONG> (ARM, 276 bytes, Stack size 32 bytes, mdns_common.o(i.mdnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mdnsEncodeName &rArr; dnsEncodeName
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendProbe
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddNsecRecord
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4ReversePtrRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4AddrRecord
</UL>

<P><STRONG><a name="[264]"></a>mdnsInit</STRONG> (ARM, 92 bytes, Stack size 16 bytes, mdns_common.o(i.mdnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mdnsInit &rArr; ipv4JoinMulticastGroup &rArr; ethDropMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1b]"></a>mdnsProcessMessage</STRONG> (ARM, 224 bytes, Stack size 72 bytes, mdns_common.o(i.mdnsProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = mdnsProcessMessage &rArr; mdnsResponderProcessQuery &rArr; mdnsSendMessage &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsProcessResponse
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdns_common.o(i.mdnsInit)
</UL>
<P><STRONG><a name="[266]"></a>mdnsProcessResponse</STRONG> (ARM, 472 bytes, Stack size 40 bytes, mdns_common.o(i.mdnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mdnsProcessResponse &rArr; mdnsResponderParseAnRecord &rArr; mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCheckSourceAddr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseAnRecord
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsProcessMessage
</UL>

<P><STRONG><a name="[268]"></a>mdnsResponderAddIpv4AddrRecord</STRONG> (ARM, 368 bytes, Stack size 56 bytes, mdns_responder.o(i.mdnsResponderAddIpv4AddrRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mdnsResponderAddIpv4AddrRecord &rArr; mdnsCheckDuplicateRecord &rArr; mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsEncodeName
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCheckDuplicateRecord
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendProbe
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendAnnouncement
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseQuestion
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderGenerateAdditionalRecords
</UL>

<P><STRONG><a name="[269]"></a>mdnsResponderAddIpv4ReversePtrRecord</STRONG> (ARM, 432 bytes, Stack size 56 bytes, mdns_responder.o(i.mdnsResponderAddIpv4ReversePtrRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mdnsResponderAddIpv4ReversePtrRecord &rArr; mdnsCheckDuplicateRecord &rArr; mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsEncodeName
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCheckDuplicateRecord
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendAnnouncement
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseQuestion
</UL>

<P><STRONG><a name="[26e]"></a>mdnsResponderAddIpv6AddrRecord</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mdns_responder.o(i.mdnsResponderAddIpv6AddrRecord))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendProbe
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendAnnouncement
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseQuestion
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderGenerateAdditionalRecords
</UL>

<P><STRONG><a name="[276]"></a>mdnsResponderAddIpv6ReversePtrRecord</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mdns_responder.o(i.mdnsResponderAddIpv6ReversePtrRecord))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendAnnouncement
</UL>

<P><STRONG><a name="[26a]"></a>mdnsResponderAddNsecRecord</STRONG> (ARM, 552 bytes, Stack size 72 bytes, mdns_responder.o(i.mdnsResponderAddNsecRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mdnsResponderAddNsecRecord &rArr; mdnsCheckDuplicateRecord &rArr; mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsEncodeName
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCheckDuplicateRecord
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseQuestion
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderGenerateAdditionalRecords
</UL>

<P><STRONG><a name="[26b]"></a>mdnsResponderChangeHostname</STRONG> (ARM, 236 bytes, Stack size 40 bytes, mdns_responder.o(i.mdnsResponderChangeHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mdnsResponderChangeHostname &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
</UL>

<P><STRONG><a name="[26c]"></a>mdnsResponderChangeState</STRONG> (ARM, 104 bytes, Stack size 24 bytes, mdns_responder.o(i.mdnsResponderChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mdnsResponderChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderLinkChangeEvent
</UL>

<P><STRONG><a name="[26d]"></a>mdnsResponderGenerateAdditionalRecords</STRONG> (ARM, 752 bytes, Stack size 72 bytes, mdns_responder.o(i.mdnsResponderGenerateAdditionalRecords))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mdnsResponderGenerateAdditionalRecords &rArr; mdnsResponderAddNsecRecord &rArr; mdnsCheckDuplicateRecord &rArr; mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddNsecRecord
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv6AddrRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4AddrRecord
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
</UL>

<P><STRONG><a name="[26f]"></a>mdnsResponderLinkChangeEvent</STRONG> (ARM, 56 bytes, Stack size 8 bytes, mdns_responder.o(i.mdnsResponderLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mdnsResponderLinkChangeEvent &rArr; mdnsDeleteMessage &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsDeleteMessage
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[267]"></a>mdnsResponderParseAnRecord</STRONG> (ARM, 228 bytes, Stack size 48 bytes, mdns_responder.o(i.mdnsResponderParseAnRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mdnsResponderParseAnRecord &rArr; mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareName
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsProcessResponse
</UL>

<P><STRONG><a name="[270]"></a>mdnsResponderParseKnownAnRecord</STRONG> (ARM, 424 bytes, Stack size 64 bytes, mdns_responder.o(i.mdnsResponderParseKnownAnRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mdnsResponderParseKnownAnRecord &rArr; mdnsCompareRecord &rArr; dnsCompareEncodedName &rArr;  dnsCompareEncodedName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareRecord
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareEncodedName
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
</UL>

<P><STRONG><a name="[272]"></a>mdnsResponderParseNsRecord</STRONG> (ARM, 224 bytes, Stack size 48 bytes, mdns_responder.o(i.mdnsResponderParseNsRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mdnsResponderParseNsRecord &rArr; mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareName
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
</UL>

<P><STRONG><a name="[273]"></a>mdnsResponderParseQuestion</STRONG> (ARM, 580 bytes, Stack size 64 bytes, mdns_responder.o(i.mdnsResponderParseQuestion))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mdnsResponderParseQuestion &rArr; mdnsResponderAddNsecRecord &rArr; mdnsCheckDuplicateRecord &rArr; mdnsCompareName &rArr;  mdnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareName
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddNsecRecord
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv6AddrRecord
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4ReversePtrRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4AddrRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
</UL>

<P><STRONG><a name="[265]"></a>mdnsResponderProcessQuery</STRONG> (ARM, 1172 bytes, Stack size 64 bytes, mdns_responder.o(i.mdnsResponderProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = mdnsResponderProcessQuery &rArr; mdnsSendMessage &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsSendMessage
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsDeleteMessage
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCreateMessage
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseQuestion
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseNsRecord
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseKnownAnRecord
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderGenerateAdditionalRecords
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsProcessMessage
</UL>

<P><STRONG><a name="[275]"></a>mdnsResponderSendAnnouncement</STRONG> (ARM, 252 bytes, Stack size 56 bytes, mdns_responder.o(i.mdnsResponderSendAnnouncement))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = mdnsResponderSendAnnouncement &rArr; mdnsSendMessage &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsSendMessage
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsDeleteMessage
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCreateMessage
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv6ReversePtrRecord
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv6AddrRecord
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4ReversePtrRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4AddrRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
</UL>

<P><STRONG><a name="[277]"></a>mdnsResponderSendProbe</STRONG> (ARM, 340 bytes, Stack size 56 bytes, mdns_responder.o(i.mdnsResponderSendProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = mdnsResponderSendProbe &rArr; mdnsSendMessage &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsSendMessage
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsEncodeName
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsDeleteMessage
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCreateMessage
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv6AddrRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4AddrRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
</UL>

<P><STRONG><a name="[278]"></a>mdnsResponderSetIpv4ReverseName</STRONG> (ARM, 104 bytes, Stack size 24 bytes, mdns_responder.o(i.mdnsResponderSetIpv4ReverseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderStartProbing
</UL>

<P><STRONG><a name="[279]"></a>mdnsResponderSetIpv6ReverseName</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mdns_responder.o(i.mdnsResponderSetIpv6ReverseName))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderStartProbing
</UL>

<P><STRONG><a name="[187]"></a>mdnsResponderStartProbing</STRONG> (ARM, 60 bytes, Stack size 8 bytes, mdns_responder.o(i.mdnsResponderStartProbing))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSetIpv6ReverseName
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSetIpv4ReverseName
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddrEx
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>

<P><STRONG><a name="[27a]"></a>mdnsResponderTick</STRONG> (ARM, 780 bytes, Stack size 32 bytes, mdns_responder.o(i.mdnsResponderTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = mdnsResponderTick &rArr; mdnsResponderSendProbe &rArr; mdnsSendMessage &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsSendMessage
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsDeleteMessage
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendProbe
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendAnnouncement
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderGenerateAdditionalRecords
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeState
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeHostname
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[274]"></a>mdnsSendMessage</STRONG> (ARM, 460 bytes, Stack size 72 bytes, mdns_common.o(i.mdnsSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mdnsSendMessage &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendProbe
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderSendAnnouncement
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
</UL>

<P><STRONG><a name="[27b]"></a>memPoolAlloc</STRONG> (ARM, 36 bytes, Stack size 16 bytes, net_mem.o(i.memPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[27d]"></a>memPoolFree</STRONG> (ARM, 24 bytes, Stack size 8 bytes, net_mem.o(i.memPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memPoolFree &rArr; osFreeMem &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[28e]"></a>memPoolInit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, net_mem.o(i.memPoolInit))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[257]"></a>menu_login</STRONG> (ARM, 1420 bytes, Stack size 56 bytes, login_menu.o(i.menu_login))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = menu_login &rArr; menu_loginuser &rArr; main_menu_user_task &rArr; user_mykee_task &rArr; wrong_unauth_key_check &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_invalid_login
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myRand
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_loginuser
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user_sd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrong_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_card
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[256]"></a>menu_loginuser</STRONG> (ARM, 96 bytes, Stack size 8 bytes, login_menu.o(i.menu_loginuser))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = menu_loginuser &rArr; main_menu_user_task &rArr; user_mykee_task &rArr; wrong_unauth_key_check &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f7]"></a>modify_user</STRONG> (ARM, 192 bytes, Stack size 16 bytes, protocol_comm.o(i.modify_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = modify_user &rArr; write_user_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[27f]"></a>multiple_task_access</STRONG> (ARM, 2612 bytes, Stack size 80 bytes, task_management.o(i.multiple_task_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = multiple_task_access &rArr; Find_card &rArr; red_led_onoff &rArr; send_i2c_cmd &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_invalid_login
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user_sd1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user_sd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrong_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_card
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_status
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Trigger_Timeout
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
</UL>

<P><STRONG><a name="[13e]"></a>myRand</STRONG> (ARM, 184 bytes, Stack size 16 bytes, login_menu.o(i.myRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = myRand &rArr; get_ticks_value &rArr; mktime &rArr; _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_upload_func
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_keyaccess
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[281]"></a>nbnsCompareName</STRONG> (ARM, 392 bytes, Stack size 56 bytes, nbns_common.o(i.nbnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nbnsCompareName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[282]"></a>nbnsEncodeName</STRONG> (ARM, 224 bytes, Stack size 24 bytes, nbns_common.o(i.nbnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbnsEncodeName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[283]"></a>nbnsInit</STRONG> (ARM, 60 bytes, Stack size 16 bytes, nbns_common.o(i.nbnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nbnsInit &rArr; udpAttachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[286]"></a>nbnsParseName</STRONG> (ARM, 364 bytes, Stack size 20 bytes, nbns_common.o(i.nbnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nbnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[1c]"></a>nbnsProcessMessage</STRONG> (ARM, 232 bytes, Stack size 40 bytes, nbns_common.o(i.nbnsProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = nbnsProcessMessage &rArr; nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nbns_common.o(i.nbnsInit)
</UL>
<P><STRONG><a name="[284]"></a>nbnsProcessQuery</STRONG> (ARM, 276 bytes, Stack size 48 bytes, nbns_responder.o(i.nbnsProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[285]"></a>nbnsProcessResponse</STRONG> (ARM, 476 bytes, Stack size 40 bytes, nbns_client.o(i.nbnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nbnsProcessResponse &rArr; nbnsCompareName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[1de]"></a>nbnsResolve</STRONG> (ARM, 240 bytes, Stack size 24 bytes, nbns_client.o(i.nbnsResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = nbnsResolve &rArr; nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[1b2]"></a>nbnsSendQuery</STRONG> (ARM, 412 bytes, Stack size 80 bytes, nbns_client.o(i.nbnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetBroadcastAddr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[287]"></a>nbnsSendResponse</STRONG> (ARM, 464 bytes, Stack size 96 bytes, nbns_responder.o(i.nbnsSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
</UL>

<P><STRONG><a name="[123]"></a>netBufferAlloc</STRONG> (ARM, 128 bytes, Stack size 16 bytes, net_mem.o(i.netBufferAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[1c7]"></a>netBufferAppend</STRONG> (ARM, 96 bytes, Stack size 4 bytes, net_mem.o(i.netBufferAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>

<P><STRONG><a name="[137]"></a>netBufferAt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, net_mem.o(i.netBufferAt))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsProcessMessage
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCreateMessage
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[202]"></a>netBufferConcat</STRONG> (ARM, 308 bytes, Stack size 12 bytes, net_mem.o(i.netBufferConcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
</UL>

<P><STRONG><a name="[124]"></a>netBufferCopy</STRONG> (ARM, 484 bytes, Stack size 48 bytes, net_mem.o(i.netBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
</UL>

<P><STRONG><a name="[122]"></a>netBufferFree</STRONG> (ARM, 36 bytes, Stack size 8 bytes, net_mem.o(i.netBufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsDeleteMessage
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[120]"></a>netBufferGetLength</STRONG> (ARM, 52 bytes, Stack size 0 bytes, net_mem.o(i.netBufferGetLength))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientProcessMessage
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsProcessMessage
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthSendPacket
</UL>

<P><STRONG><a name="[240]"></a>netBufferRead</STRONG> (ARM, 204 bytes, Stack size 40 bytes, net_mem.o(i.netBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netBufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthSendPacket
</UL>

<P><STRONG><a name="[190]"></a>netBufferSetLength</STRONG> (ARM, 356 bytes, Stack size 24 bytes, net_mem.o(i.netBufferSetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsSendMessage
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[227]"></a>netBufferWrite</STRONG> (ARM, 204 bytes, Stack size 40 bytes, net_mem.o(i.netBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netBufferWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[252]"></a>netConfigInterface</STRONG> (ARM, 368 bytes, Stack size 16 bytes, net.o(i.netConfigInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = netConfigInterface &rArr; mdnsInit &rArr; ipv4JoinMulticastGroup &rArr; ethDropMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>netGetDefaultInterface</STRONG> (ARM, 8 bytes, Stack size 0 bytes, net.o(i.netGetDefaultInterface))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientGetDefaultSettings
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[19c]"></a>netGetRand</STRONG> (ARM, 60 bytes, Stack size 12 bytes, net_misc.o(i.netGetRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[28c]"></a>netGetRandBit</STRONG> (ARM, 316 bytes, Stack size 16 bytes, net_misc.o(i.netGetRandBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netGetRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>

<P><STRONG><a name="[198]"></a>netGetRandRange</STRONG> (ARM, 68 bytes, Stack size 24 bytes, net_misc.o(i.netGetRandRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = netGetRandRange &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
</UL>

<P><STRONG><a name="[24c]"></a>netInit</STRONG> (ARM, 428 bytes, Stack size 24 bytes, net.o(i.netInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = netInit &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28a]"></a>netInitRand</STRONG> (ARM, 272 bytes, Stack size 24 bytes, net_misc.o(i.netInitRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netInitRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandBit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[293]"></a>netProcessLinkChange</STRONG> (ARM, 288 bytes, Stack size 24 bytes, net_misc.o(i.netProcessLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; dhcpClientLinkChangeEvent &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderLinkChangeEvent
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[24f]"></a>netSetDriver</STRONG> (ARM, 68 bytes, Stack size 16 bytes, net.o(i.netSetDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netSetDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24e]"></a>netSetHostname</STRONG> (ARM, 80 bytes, Stack size 16 bytes, net.o(i.netSetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netSetHostname &rArr; strSafeCopy &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24d]"></a>netSetInterfaceName</STRONG> (ARM, 80 bytes, Stack size 16 bytes, net.o(i.netSetInterfaceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netSetInterfaceName &rArr; strSafeCopy &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[251]"></a>netSetMacAddr</STRONG> (ARM, 92 bytes, Stack size 16 bytes, net.o(i.netSetMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netSetMacAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToEui64
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[250]"></a>netSetPhyDriver</STRONG> (ARM, 68 bytes, Stack size 16 bytes, net.o(i.netSetPhyDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netSetPhyDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[298]"></a>netStartTimer</STRONG> (ARM, 40 bytes, Stack size 16 bytes, net_misc.o(i.netStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
</UL>

<P><STRONG><a name="[2e6]"></a>netStopTimer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, net_misc.o(i.netStopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
</UL>

<P><STRONG><a name="[1d]"></a>netTask</STRONG> (ARM, 420 bytes, Stack size 24 bytes, net.o(i.netTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = netTask &rArr; netTick &rArr; mdnsResponderTick &rArr; mdnsResponderSendProbe &rArr; mdnsSendMessage &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.netInit)
</UL>
<P><STRONG><a name="[29a]"></a>netTick</STRONG> (ARM, 736 bytes, Stack size 16 bytes, net_misc.o(i.netTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = netTick &rArr; mdnsResponderTick &rArr; mdnsResponderSendProbe &rArr; mdnsSendMessage &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTick
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
</UL>

<P><STRONG><a name="[29d]"></a>netTimerExpired</STRONG> (ARM, 64 bytes, Stack size 16 bytes, net_misc.o(i.netTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netTimerExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
</UL>

<P><STRONG><a name="[316]"></a>netTimerRunning</STRONG> (ARM, 12 bytes, Stack size 0 bytes, net_misc.o(i.netTimerRunning))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[29e]"></a>network1</STRONG> (ARM, 1944 bytes, Stack size 64 bytes, aka_sys.o(i.network1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = network1 &rArr; view_mac_address &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_ip
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_tcp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_hb
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_cliq
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip1
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_str
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
</UL>

<P><STRONG><a name="[12a]"></a>nicGetLogicalInterface</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nic.o(i.nicGetLogicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>

<P><STRONG><a name="[189]"></a>nicGetPhysicalInterface</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nic.o(i.nicGetPhysicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>

<P><STRONG><a name="[2a8]"></a>nicGetSwitchPort</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nic.o(i.nicGetSwitchPort))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[2a7]"></a>nicIsParentInterface</STRONG> (ARM, 28 bytes, Stack size 0 bytes, nic.o(i.nicIsParentInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[1b5]"></a>nicNotifyLinkChange</STRONG> (ARM, 220 bytes, Stack size 24 bytes, nic.o(i.nicNotifyLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; dhcpClientLinkChangeEvent &rArr; mdnsResponderStartProbing &rArr; mdnsResponderSetIpv4ReverseName &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIsParentInterface
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetSwitchPort
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848EventHandler
</UL>

<P><STRONG><a name="[23f]"></a>nicProcessPacket</STRONG> (ARM, 140 bytes, Stack size 24 bytes, nic.o(i.nicProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthReceivePacket
</UL>

<P><STRONG><a name="[1cf]"></a>nicSendPacket</STRONG> (ARM, 232 bytes, Stack size 32 bytes, nic.o(i.nicSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nicSendPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[29b]"></a>nicTick</STRONG> (ARM, 100 bytes, Stack size 8 bytes, nic.o(i.nicTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nicTick
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[1c0]"></a>nicUpdateMacAddrFilter</STRONG> (ARM, 116 bytes, Stack size 16 bytes, nic.o(i.nicUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nicUpdateMacAddrFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
</UL>

<P><STRONG><a name="[2a9]"></a>operating_parameter</STRONG> (ARM, 328 bytes, Stack size 24 bytes, aka_sys.o(i.operating_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = operating_parameter &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_int
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
</UL>

<P><STRONG><a name="[17e]"></a>osAcquireMutex</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_port_none.o(i.osAcquireMutex))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMaskEx
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddrEx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGatewayEx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[27c]"></a>osAllocMem</STRONG> (ARM, 32 bytes, Stack size 16 bytes, os_port_none.o(i.osAllocMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>

<P><STRONG><a name="[289]"></a>osCreateEvent</STRONG> (ARM, 20 bytes, Stack size 0 bytes, os_port_none.o(i.osCreateEvent))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[28d]"></a>osCreateMutex</STRONG> (ARM, 12 bytes, Stack size 0 bytes, os_port_none.o(i.osCreateMutex))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[292]"></a>osCreateTask</STRONG> (ARM, 24 bytes, Stack size 4 bytes, os_port_none.o(i.osCreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = osCreateTask
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[28b]"></a>osDeleteEvent</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_port_none.o(i.osDeleteEvent))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[27e]"></a>osFreeMem</STRONG> (ARM, 32 bytes, Stack size 8 bytes, os_port_none.o(i.osFreeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osFreeMem &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>

<P><STRONG><a name="[11d]"></a>osGetSystemTime</STRONG> (ARM, 12 bytes, Stack size 0 bytes, os_port_none.o(i.osGetSystemTime))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverwait
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverclose
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateSend
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateReceive
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateListen
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwwait
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwreceive
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwSend
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeStatefw
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatereceive
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateopenwait
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateSend
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStatereceive
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeeventState
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderTick
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeState
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[17d]"></a>osReleaseMutex</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_port_none.o(i.osReleaseMutex))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMaskEx
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddrEx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGatewayEx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderChangeState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[2d5]"></a>osResetEvent</STRONG> (ARM, 12 bytes, Stack size 0 bytes, os_port_none.o(i.osResetEvent))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
</UL>

<P><STRONG><a name="[248]"></a>osResumeAllTasks</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_port_none.o(i.osResumeAllTasks))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverwait
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateSend
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateReceive
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit
</UL>

<P><STRONG><a name="[1b8]"></a>osSetEvent</STRONG> (ARM, 12 bytes, Stack size 0 bytes, os_port_none.o(i.osSetEvent))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthSendPacket
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848Tick
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp83848Init
</UL>

<P><STRONG><a name="[23e]"></a>osSetEventFromIsr</STRONG> (ARM, 20 bytes, Stack size 0 bytes, os_port_none.o(i.osSetEventFromIsr))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc23xxEthIrqHandler
</UL>

<P><STRONG><a name="[247]"></a>osSuspendAllTasks</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_port_none.o(i.osSuspendAllTasks))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverwait
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateSend
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateReceive
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit
</UL>

<P><STRONG><a name="[299]"></a>osWaitForEvent</STRONG> (ARM, 40 bytes, Stack size 0 bytes, os_port_none.o(i.osWaitForEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
</UL>

<P><STRONG><a name="[144]"></a>p1char</STRONG> (ARM, 88 bytes, Stack size 16 bytes, uart.o(i.p1char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = p1char
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_bledata
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_invalid_login
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_key_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task_select
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_login_success
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_door_open
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_serial_no
</UL>

<P><STRONG><a name="[106]"></a>p1str</STRONG> (ARM, 44 bytes, Stack size 8 bytes, uart.o(i.p1str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = p1str &rArr; p1char
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bio_verification
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_command
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_userenroll
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_userrecord
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_database
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_database
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biomtric
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[c7]"></a>pchar</STRONG> (ARM, 88 bytes, Stack size 16 bytes, uart.o(i.pchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_cardreader
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_biometric
</UL>

<P><STRONG><a name="[249]"></a>prot_init_event</STRONG> (ARM, 208 bytes, Stack size 16 bytes, protocol_comm.o(i.prot_init_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prot_init_event &rArr; read_event_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>prot_log_event</STRONG> (ARM, 220 bytes, Stack size 24 bytes, protocol_comm.o(i.prot_log_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = prot_log_event &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_event_sd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_loginuser
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnewkeys
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
</UL>

<P><STRONG><a name="[110]"></a>protocol_verification</STRONG> (ARM, 176 bytes, Stack size 8 bytes, bio.o(i.protocol_verification))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = protocol_verification &rArr; p1str &rArr; p1char
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_length
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_identity
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_command
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_userrecord
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_database
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_database
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_status_lumi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
</UL>

<P><STRONG><a name="[dd]"></a>pstr</STRONG> (ARM, 44 bytes, Stack size 8 bytes, uart.o(i.pstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pstr &rArr; pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pchar
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_key_log
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_keyevents
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClient_eventInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;structure_size
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverclose
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateSend
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpconfig_protocol_send
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Connection_confiq
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_protocol
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_user
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrong_unauth_key_check
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwreceive
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwSend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwConnect
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_protocol_fw
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatereceive
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateopenwait
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateSend
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateConnect
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateClose
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_hb_protocol_packet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation_client
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkcrc_server
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_serial_no_server
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_receive
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket_hb
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecyptPIAMPacket_hb
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncyptPIAMPacket
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStatereceive
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateConnect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_packet
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation_client_event
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum_verification_event
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_receive
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnewkeys
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[bb]"></a>read_ac_adc_ch</STRONG> (ARM, 44 bytes, Stack size 4 bytes, adc.o(i.read_ac_adc_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = read_ac_adc_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_Handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_hb_protocol_packet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>

<P><STRONG><a name="[163]"></a>read_boot_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.read_boot_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_boot_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation_fw
</UL>

<P><STRONG><a name="[d6]"></a>read_code</STRONG> (ARM, 760 bytes, Stack size 64 bytes, msg_menu.o(i.read_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = read_code &rArr;  lcd_init (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delete
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_char
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_upload_func
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergency_keyaccess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_menu
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrow_right_pressed
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
</UL>

<P><STRONG><a name="[1f3]"></a>read_comm_sd</STRONG> (ARM, 44 bytes, Stack size 8 bytes, mci_menu.o(i.read_comm_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_comm_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwConnect
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateConnect
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_tcp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_hb
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[1ea]"></a>read_dayofmonth</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rtc.o(i.read_dayofmonth))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
</UL>

<P><STRONG><a name="[c0]"></a>read_dc_adc_ch</STRONG> (ARM, 44 bytes, Stack size 4 bytes, adc.o(i.read_dc_adc_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = read_dc_adc_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_Handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_hb_protocol_packet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>

<P><STRONG><a name="[15b]"></a>read_event_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.read_event_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_event_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_init_event
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_packet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_receive
</UL>

<P><STRONG><a name="[2ab]"></a>read_hexavalue</STRONG> (ARM, 588 bytes, Stack size 72 bytes, msg_menu.o(i.read_hexavalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = read_hexavalue &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delete
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_char
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_back
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
</UL>

<P><STRONG><a name="[1e9]"></a>read_hr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rtc.o(i.read_hr))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
</UL>

<P><STRONG><a name="[11b]"></a>read_key_sd</STRONG> (ARM, 56 bytes, Stack size 8 bytes, mci_menu.o(i.read_key_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_key_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_key_status
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task_select
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
</UL>

<P><STRONG><a name="[119]"></a>read_keyevents_sd</STRONG> (ARM, 56 bytes, Stack size 8 bytes, mci_menu.o(i.read_keyevents_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_keyevents_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_key_log
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_key_status
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task_select
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
</UL>

<P><STRONG><a name="[1f5]"></a>read_mac_sd</STRONG> (ARM, 44 bytes, Stack size 8 bytes, mci_menu.o(i.read_mac_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_mac_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
</UL>

<P><STRONG><a name="[1e8]"></a>read_min</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rtc.o(i.read_min))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
</UL>

<P><STRONG><a name="[1eb]"></a>read_month</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rtc.o(i.read_month))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
</UL>

<P><STRONG><a name="[1e7]"></a>read_sec</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rtc.o(i.read_sec))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
</UL>

<P><STRONG><a name="[2a0]"></a>read_string</STRONG> (ARM, 664 bytes, Stack size 88 bytes, msg_menu.o(i.read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = read_string &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delete
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_char
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_back
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[148]"></a>read_system_sd</STRONG> (ARM, 44 bytes, Stack size 8 bytes, mci_menu.o(i.read_system_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_system_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_hb_protocol_packet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_serial_no
</UL>

<P><STRONG><a name="[113]"></a>read_task_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.read_task_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_task_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftask_allign
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_status
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_task
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_task
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[14a]"></a>read_task_status</STRONG> (ARM, 112 bytes, Stack size 16 bytes, protocol_comm.o(i.read_task_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_task_status &rArr; read_task_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task_select
</UL>

<P><STRONG><a name="[2ac]"></a>read_taskbkp_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.read_taskbkp_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_taskbkp_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftask_allign
</UL>

<P><STRONG><a name="[e1]"></a>read_user_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.read_user_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_user_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_login
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user_sd1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_user_sd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_card
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign_bio
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_user_bio
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bio_verification
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_firmware_info
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_status
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_user
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_userenroll
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_user_details
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_biomtric
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chage_bioflag
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[280]"></a>read_user_status</STRONG> (ARM, 88 bytes, Stack size 16 bytes, protocol_comm.o(i.read_user_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = read_user_status &rArr; read_user_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
</UL>

<P><STRONG><a name="[2ad]"></a>read_userbkp_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.read_userbkp_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_userbkp_sd &rArr; ReadBytes &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign_bio
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign
</UL>

<P><STRONG><a name="[1ec]"></a>read_year</STRONG> (ARM, 20 bytes, Stack size 0 bytes, rtc.o(i.read_year))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
</UL>

<P><STRONG><a name="[e3]"></a>red_led_onoff</STRONG> (ARM, 96 bytes, Stack size 16 bytes, led.o(i.red_led_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = red_led_onoff &rArr; send_i2c_cmd &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_i2c_cmd
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i2c_value
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_value
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_card
</UL>

<P><STRONG><a name="[2af]"></a>register_keys</STRONG> (ARM, 236 bytes, Stack size 16 bytes, key_menu.o(i.register_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = register_keys &rArr; addnewkeys &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnewkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
</UL>

<P><STRONG><a name="[c6]"></a>regular_card</STRONG> (ARM, 280 bytes, Stack size 16 bytes, rfid.o(i.regular_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = regular_card &rArr; send_i2c_cmd &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_i2c_cmd
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i2c_value
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_block_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_cardreader
</UL>

<P><STRONG><a name="[cd]"></a>relay</STRONG> (ARM, 92 bytes, Stack size 0 bytes, door.o(i.relay))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
</UL>

<P><STRONG><a name="[fb]"></a>rtc_init</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rtc.o(i.rtc_init))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetResetInit
</UL>

<P><STRONG><a name="[109]"></a>save_user_details</STRONG> (ARM, 120 bytes, Stack size 16 bytes, bio.o(i.save_user_details))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = save_user_details &rArr; write_user_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[107]"></a>search_userenroll</STRONG> (ARM, 608 bytes, Stack size 80 bytes, bio.o(i.search_userenroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = search_userenroll &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_enrollment
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[ba]"></a>select_menu</STRONG> (ARM, 136 bytes, Stack size 0 bytes, msg_menu.o(i.select_menu))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diagnostics
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operating_parameter
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>

<P><STRONG><a name="[117]"></a>self_user_allign</STRONG> (ARM, 196 bytes, Stack size 16 bytes, mci_menu.o(i.self_user_allign))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = self_user_allign &rArr; write_userbkp_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_userbkp_sd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userbkp_sd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user_sector
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_backup_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>self_user_allign_bio</STRONG> (ARM, 232 bytes, Stack size 16 bytes, mci_menu.o(i.self_user_allign_bio))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = self_user_allign_bio &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_userbkp_sd
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_sd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userbkp_sd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_sd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user_sector
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_backup_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chage_bioflag
</UL>

<P><STRONG><a name="[118]"></a>selftask_allign</STRONG> (ARM, 180 bytes, Stack size 16 bytes, mci_menu.o(i.selftask_allign))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = selftask_allign &rArr; write_taskbkp_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_taskbkp_sd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_task_sd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_taskbkp_sd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_sd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_backup_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b3]"></a>send_biometric</STRONG> (ARM, 24 bytes, Stack size 8 bytes, bio.o(i.send_biometric))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_biometric &rArr; pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pchar
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
</UL>

<P><STRONG><a name="[145]"></a>send_bledata</STRONG> (ARM, 44 bytes, Stack size 8 bytes, uart.o(i.send_bledata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_bledata &rArr; p1char
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_invalid_login
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_key_status
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task_select
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_login_success
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_door_open
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_serial_no
</UL>

<P><STRONG><a name="[1ee]"></a>send_i2c_cmd</STRONG> (ARM, 200 bytes, Stack size 8 bytes, i2c.o(i.send_i2c_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = send_i2c_cmd &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_wr_byte
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_rx_to_buf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ask_polling_op
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_led_onoff
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greenled_onoff
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regular_card
</UL>

<P><STRONG><a name="[10f]"></a>send_lumidign_command</STRONG> (ARM, 732 bytes, Stack size 16 bytes, bio.o(i.send_lumidign_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_lumidign_command &rArr; send_biometric &rArr; pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_biometric
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_identity
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_workdb
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_command
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_userrecord
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_database
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_database
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_status_lumi
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_trigger_value
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
</UL>

<P><STRONG><a name="[151]"></a>serial_verification</STRONG> (ARM, 132 bytes, Stack size 0 bytes, telnet_server.o(i.serial_verification))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_protocol
</UL>

<P><STRONG><a name="[24b]"></a>service_menu</STRONG> (ARM, 100 bytes, Stack size 8 bytes, login_menu.o(i.service_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = service_menu &rArr; main_menu_administrator &rArr; finger_module_menu &rArr; add_enrollment &rArr; add_enrollment_user &rArr; getresult_identy &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>set_command</STRONG> (ARM, 344 bytes, Stack size 48 bytes, bio.o(i.set_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = set_command &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
</UL>

<P><STRONG><a name="[1f2]"></a>set_date_time</STRONG> (ARM, 116 bytes, Stack size 16 bytes, clock_calndr.o(i.set_date_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = set_date_time &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_year
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sec
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_month
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_min
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hr
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dayofmonth
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[29f]"></a>set_ip</STRONG> (ARM, 196 bytes, Stack size 24 bytes, aka_sys.o(i.set_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = set_ip &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[2a1]"></a>set_ip1</STRONG> (ARM, 200 bytes, Stack size 24 bytes, aka_sys.o(i.set_ip1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = set_ip1 &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[16a]"></a>set_option</STRONG> (ARM, 144 bytes, Stack size 24 bytes, aka_sys.o(i.set_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = set_option &rArr; get_menu_key &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_setup
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[2a3]"></a>set_port</STRONG> (ARM, 232 bytes, Stack size 24 bytes, aka_sys.o(i.set_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = set_port &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[2a6]"></a>set_port_cliq</STRONG> (ARM, 232 bytes, Stack size 24 bytes, aka_sys.o(i.set_port_cliq))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = set_port_cliq &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[2a4]"></a>set_port_hb</STRONG> (ARM, 236 bytes, Stack size 24 bytes, aka_sys.o(i.set_port_hb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = set_port_hb &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[2a5]"></a>set_port_tcp</STRONG> (ARM, 236 bytes, Stack size 24 bytes, aka_sys.o(i.set_port_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = set_port_tcp &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[16d]"></a>set_timeout</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer.o(i.set_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1char
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pchar
</UL>

<P><STRONG><a name="[10c]"></a>set_workdb</STRONG> (ARM, 340 bytes, Stack size 48 bytes, bio.o(i.set_workdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = set_workdb &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_status_lumi
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_module_menu
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_alluser
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user_details
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment
</UL>

<P><STRONG><a name="[2bd]"></a>socketAllocate</STRONG> (ARM, 248 bytes, Stack size 32 bytes, socket_misc.o(i.socketAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>

<P><STRONG><a name="[31b]"></a>socketBind</STRONG> (ARM, 84 bytes, Stack size 0 bytes, socket.o(i.socketBind))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerInit
</UL>

<P><STRONG><a name="[2c0]"></a>socketClose</STRONG> (ARM, 152 bytes, Stack size 16 bytes, socket.o(i.socketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverwait
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverclose
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateSend
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateReceive
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwreceive
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwClose
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateClose
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateClose
</UL>

<P><STRONG><a name="[2c2]"></a>socketConnect</STRONG> (ARM, 176 bytes, Stack size 24 bytes, socket.o(i.socketConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwConnect
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateConnect
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateConnect
</UL>

<P><STRONG><a name="[28f]"></a>socketInit</STRONG> (ARM, 148 bytes, Stack size 16 bytes, socket.o(i.socketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = socketInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[2c4]"></a>socketListen</STRONG> (ARM, 92 bytes, Stack size 16 bytes, socket.o(i.socketListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = socketListen &rArr; tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerInit
</UL>

<P><STRONG><a name="[2c6]"></a>socketOpen</STRONG> (ARM, 56 bytes, Stack size 16 bytes, socket.o(i.socketOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwConnect
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateConnect
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateConnect
</UL>

<P><STRONG><a name="[2c7]"></a>socketReceive</STRONG> (ARM, 60 bytes, Stack size 40 bytes, socket.o(i.socketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateReceive
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwreceive
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatereceive
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateSend
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStatereceive
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
</UL>

<P><STRONG><a name="[2c8]"></a>socketReceiveEx</STRONG> (ARM, 344 bytes, Stack size 96 bytes, socket.o(i.socketReceiveEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>

<P><STRONG><a name="[2cb]"></a>socketSend</STRONG> (ARM, 56 bytes, Stack size 40 bytes, socket.o(i.socketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateSend
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwSend
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
</UL>

<P><STRONG><a name="[2cc]"></a>socketSendTo</STRONG> (ARM, 260 bytes, Stack size 96 bytes, socket.o(i.socketSendTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
</UL>

<P><STRONG><a name="[ec]"></a>spi_byte</STRONG> (ARM, 192 bytes, Stack size 8 bytes, spi.o(i.spi_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEn
</UL>

<P><STRONG><a name="[eb]"></a>spi_cs</STRONG> (ARM, 64 bytes, Stack size 0 bytes, spi.o(i.spi_cs))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteEn
</UL>

<P><STRONG><a name="[296]"></a>strSafeCopy</STRONG> (ARM, 124 bytes, Stack size 24 bytes, str.o(i.strSafeCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strSafeCopy &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
</UL>

<P><STRONG><a name="[24a]"></a>structure_size</STRONG> (ARM, 148 bytes, Stack size 40 bytes, main.o(i.structure_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = structure_size &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>swapInt16</STRONG> (ARM, 24 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt16))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsProcessResponse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsSendMessage
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCompareRecord
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCheckDuplicateRecord
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderProcessQuery
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseQuestion
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseNsRecord
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseKnownAnRecord
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseAnRecord
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderGenerateAdditionalRecords
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddNsecRecord
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4ReversePtrRecord
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
</UL>

<P><STRONG><a name="[18a]"></a>swapInt32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt32))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderParseKnownAnRecord
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddNsecRecord
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4ReversePtrRecord
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsResponderAddIpv4AddrRecord
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetPrefixLength
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseOffer
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseNak
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientParseAck
</UL>

<P><STRONG><a name="[1d8]"></a>system_restart</STRONG> (ARM, 148 bytes, Stack size 8 bytes, util_menu.o(i.system_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = system_restart &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reset_feed
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_2S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwSend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[258]"></a>system_setup</STRONG> (ARM, 312 bytes, Stack size 16 bytes, aka_sys.o(i.system_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = system_setup &rArr; network1 &rArr; view_mac_address &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operating_parameter
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_str
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
</UL>

<P><STRONG><a name="[2c1]"></a>tcpAbort</STRONG> (ARM, 192 bytes, Stack size 16 bytes, tcp.o(i.tcpAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
</UL>

<P><STRONG><a name="[2d3]"></a>tcpAccept</STRONG> (ARM, 664 bytes, Stack size 40 bytes, tcp.o(i.tcpAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpAccept &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateListen
</UL>

<P><STRONG><a name="[2d8]"></a>tcpAddOption</STRONG> (ARM, 256 bytes, Stack size 40 bytes, tcp_misc.o(i.tcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcpAddOption
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[2d1]"></a>tcpChangeState</STRONG> (ARM, 84 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpChangeState &rArr; tcpUpdateEvents
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[2d9]"></a>tcpCheckAck</STRONG> (ARM, 756 bytes, Stack size 48 bytes, tcp_misc.o(i.tcpCheckAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateAck
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[2e1]"></a>tcpCheckFinWait2Timer</STRONG> (ARM, 56 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckFinWait2Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpCheckFinWait2Timer &rArr; tcpChangeState &rArr; tcpUpdateEvents
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[319]"></a>tcpCheckKeepAliveTimer</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcp_timer.o(i.tcpCheckKeepAliveTimer))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[2e2]"></a>tcpCheckOverrideTimer</STRONG> (ARM, 340 bytes, Stack size 32 bytes, tcp_timer.o(i.tcpCheckOverrideTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcpCheckOverrideTimer &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[2e3]"></a>tcpCheckPersistTimer</STRONG> (ARM, 204 bytes, Stack size 16 bytes, tcp_timer.o(i.tcpCheckPersistTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[2e4]"></a>tcpCheckRetransmitTimer</STRONG> (ARM, 296 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckRetransmitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcpCheckRetransmitTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[2e7]"></a>tcpCheckSeqNum</STRONG> (ARM, 392 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpCheckSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcpCheckSeqNum &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[2e8]"></a>tcpCheckSyn</STRONG> (ARM, 144 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpCheckSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[2e9]"></a>tcpCheckTimeWaitTimer</STRONG> (ARM, 84 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckTimeWaitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpCheckTimeWaitTimer &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[1f9]"></a>tcpClientChangeState</STRONG> (ARM, 36 bytes, Stack size 8 bytes, tcp_client_hb.o(i.tcpClientChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpClientChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienthbTask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientInit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatereceive
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateopenwait
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateSend
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateConnect
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateClose
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[2ea]"></a>tcpClientChangeStatefw</STRONG> (ARM, 36 bytes, Stack size 8 bytes, tcp_client_fw.o(i.tcpClientChangeStatefw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpClientChangeStatefw
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwTask
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwwait
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwreceive
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwSend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwConnect
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwClose
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwInit
</UL>

<P><STRONG><a name="[2eb]"></a>tcpClientChangeeventState</STRONG> (ARM, 36 bytes, Stack size 8 bytes, tcp_client_event.o(i.tcpClientChangeeventState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpClientChangeeventState
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventTask
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClient_eventInit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStatereceive
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateConnect
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateClose
</UL>

<P><STRONG><a name="[255]"></a>tcpClientInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, tcp_client_hb.o(i.tcpClientInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpClientInit &rArr; pstr &rArr; pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ec]"></a>tcpClientStateClose</STRONG> (ARM, 76 bytes, Stack size 8 bytes, tcp_client_hb.o(i.tcpClientStateClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpClientStateClose &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienthbTask
</UL>

<P><STRONG><a name="[2ed]"></a>tcpClientStateConnect</STRONG> (ARM, 488 bytes, Stack size 48 bytes, tcp_client_hb.o(i.tcpClientStateConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = tcpClientStateConnect &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienthbTask
</UL>

<P><STRONG><a name="[2ee]"></a>tcpClientStateInit</STRONG> (ARM, 80 bytes, Stack size 8 bytes, tcp_client_hb.o(i.tcpClientStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpClientStateInit &rArr; pstr &rArr; pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienthbTask
</UL>

<P><STRONG><a name="[2ef]"></a>tcpClientStateSend</STRONG> (ARM, 456 bytes, Stack size 56 bytes, tcp_client_hb.o(i.tcpClientStateSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = tcpClientStateSend &rArr; handle_hb_protocol_packet &rArr; EncyptPIAMPacket_hb &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_hb_protocol_packet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienthbTask
</UL>

<P><STRONG><a name="[2f0]"></a>tcpClientStatefwClose</STRONG> (ARM, 32 bytes, Stack size 8 bytes, tcp_client_fw.o(i.tcpClientStatefwClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpClientStatefwClose &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeStatefw
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwTask
</UL>

<P><STRONG><a name="[2f1]"></a>tcpClientStatefwConnect</STRONG> (ARM, 284 bytes, Stack size 40 bytes, tcp_client_fw.o(i.tcpClientStatefwConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcpClientStatefwConnect &rArr; socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeStatefw
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwTask
</UL>

<P><STRONG><a name="[2f2]"></a>tcpClientStatefwInit</STRONG> (ARM, 348 bytes, Stack size 40 bytes, tcp_client_fw.o(i.tcpClientStatefwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = tcpClientStatefwInit &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeStatefw
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwTask
</UL>

<P><STRONG><a name="[2f3]"></a>tcpClientStatefwSend</STRONG> (ARM, 516 bytes, Stack size 64 bytes, tcp_client_fw.o(i.tcpClientStatefwSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = tcpClientStatefwSend &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeStatefw
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwTask
</UL>

<P><STRONG><a name="[2f4]"></a>tcpClientStatefwreceive</STRONG> (ARM, 676 bytes, Stack size 64 bytes, tcp_client_fw.o(i.tcpClientStatefwreceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = tcpClientStatefwreceive &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ftp_char
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeStatefw
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_protocol_fw
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwTask
</UL>

<P><STRONG><a name="[2f5]"></a>tcpClientStatefwwait</STRONG> (ARM, 60 bytes, Stack size 8 bytes, tcp_client_fw.o(i.tcpClientStatefwwait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcpClientStatefwwait &rArr; tcpClientChangeStatefw
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeStatefw
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientfwTask
</UL>

<P><STRONG><a name="[2f6]"></a>tcpClientStateopenwait</STRONG> (ARM, 140 bytes, Stack size 8 bytes, tcp_client_hb.o(i.tcpClientStateopenwait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpClientStateopenwait &rArr; pstr &rArr; pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienthbTask
</UL>

<P><STRONG><a name="[2f7]"></a>tcpClientStatereceive</STRONG> (ARM, 388 bytes, Stack size 64 bytes, tcp_client_hb.o(i.tcpClientStatereceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296 + Unknown Stack Size
<LI>Call Chain = tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_receive
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecyptPIAMPacket_hb
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienthbTask
</UL>

<P><STRONG><a name="[254]"></a>tcpClient_eventInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, tcp_client_event.o(i.tcpClient_eventInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpClient_eventInit &rArr; pstr &rArr; pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeeventState
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f8]"></a>tcpClienteventStateClose</STRONG> (ARM, 32 bytes, Stack size 8 bytes, tcp_client_event.o(i.tcpClienteventStateClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpClienteventStateClose &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeeventState
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventTask
</UL>

<P><STRONG><a name="[2f9]"></a>tcpClienteventStateConnect</STRONG> (ARM, 196 bytes, Stack size 8 bytes, tcp_client_event.o(i.tcpClienteventStateConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpClienteventStateConnect &rArr; socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeeventState
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventTask
</UL>

<P><STRONG><a name="[2fa]"></a>tcpClienteventStateInit</STRONG> (ARM, 784 bytes, Stack size 48 bytes, tcp_client_event.o(i.tcpClienteventStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = tcpClienteventStateInit &rArr; getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_event_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeeventState
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventTask
</UL>

<P><STRONG><a name="[2fb]"></a>tcpClienteventStateSend</STRONG> (ARM, 852 bytes, Stack size 128 bytes, tcp_client_event.o(i.tcpClienteventStateSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = tcpClienteventStateSend &rArr; telnetServerTask &rArr; telnetServerStateSend &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reset_feed
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerTask
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecyptPIAMPacket
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeeventState
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_packet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_receive
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventTask
</UL>

<P><STRONG><a name="[2fc]"></a>tcpClienteventStatereceive</STRONG> (ARM, 360 bytes, Stack size 128 bytes, tcp_client_event.o(i.tcpClienteventStatereceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = tcpClienteventStatereceive &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecyptPIAMPacket
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeeventState
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_receive
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventTask
</UL>

<P><STRONG><a name="[172]"></a>tcpClienteventTask</STRONG> (ARM, 168 bytes, Stack size 8 bytes, tcp_client_event.o(i.tcpClienteventTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = tcpClienteventTask &rArr; tcpClienteventStateSend &rArr; telnetServerTask &rArr; telnetServerStateSend &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStatereceive
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateInit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateConnect
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateClose
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeeventState
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[1fa]"></a>tcpClientfwInit</STRONG> (ARM, 28 bytes, Stack size 8 bytes, tcp_client_fw.o(i.tcpClientfwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpClientfwInit &rArr; pstr &rArr; pchar
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeStatefw
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[170]"></a>tcpClientfwTask</STRONG> (ARM, 160 bytes, Stack size 8 bytes, tcp_client_fw.o(i.tcpClientfwTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = tcpClientfwTask &rArr; tcpClientStatefwreceive &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwwait
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwreceive
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwSend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwConnect
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatefwClose
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeStatefw
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[171]"></a>tcpClienthbTask</STRONG> (ARM, 160 bytes, Stack size 8 bytes, tcp_client_hb.o(i.tcpClienthbTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStatereceive
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateopenwait
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateSend
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateInit
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateConnect
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientStateClose
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[2dc]"></a>tcpComputeRto</STRONG> (ARM, 276 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpComputeRto))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpComputeRto
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[2c3]"></a>tcpConnect</STRONG> (ARM, 504 bytes, Stack size 32 bytes, tcp.o(i.tcpConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsUnspecifiedAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
</UL>

<P><STRONG><a name="[2d2]"></a>tcpDeleteControlBlock</STRONG> (ARM, 56 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpDeleteControlBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
</UL>

<P><STRONG><a name="[302]"></a>tcpDumpHeader</STRONG> (ARM, 4 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
</UL>

<P><STRONG><a name="[2df]"></a>tcpFastLossRecovery</STRONG> (ARM, 72 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFastLossRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tcpFastLossRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[2de]"></a>tcpFastRecovery</STRONG> (ARM, 140 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFastRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tcpFastRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[2e0]"></a>tcpFastRetransmit</STRONG> (ARM, 116 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFastRetransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = tcpFastRetransmit &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[2ff]"></a>tcpFlushRetransmitQueue</STRONG> (ARM, 68 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcpFlushRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[300]"></a>tcpFlushSynQueue</STRONG> (ARM, 60 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushSynQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcpFlushSynQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[2d6]"></a>tcpGenerateInitialSeqNum</STRONG> (ARM, 32 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpGenerateInitialSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tcpGenerateInitialSeqNum &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[2be]"></a>tcpGetDynamicPort</STRONG> (ARM, 100 bytes, Stack size 8 bytes, tcp.o(i.tcpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcpGetDynamicPort &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[318]"></a>tcpGetOption</STRONG> (ARM, 196 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[2d4]"></a>tcpGetState</STRONG> (ARM, 40 bytes, Stack size 16 bytes, tcp.o(i.tcpGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcpGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[291]"></a>tcpInit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, tcp.o(i.tcpInit))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[2da]"></a>tcpIsDuplicateAck</STRONG> (ARM, 116 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpIsDuplicateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpIsDuplicateAck
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[317]"></a>tcpIsDuplicateSyn</STRONG> (ARM, 140 bytes, Stack size 12 bytes, tcp_misc.o(i.tcpIsDuplicateSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcpIsDuplicateSyn
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[2bf]"></a>tcpKillOldestConnection</STRONG> (ARM, 164 bytes, Stack size 24 bytes, tcp.o(i.tcpKillOldestConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[2c5]"></a>tcpListen</STRONG> (ARM, 108 bytes, Stack size 16 bytes, tcp.o(i.tcpListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
</UL>

<P><STRONG><a name="[301]"></a>tcpNagleAlgo</STRONG> (ARM, 668 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpNagleAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[221]"></a>tcpProcessSegment</STRONG> (ARM, 1224 bytes, Stack size 64 bytes, tcp_fsm.o(i.tcpProcessSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[30f]"></a>tcpProcessSegmentData</STRONG> (ARM, 336 bytes, Stack size 40 bytes, tcp_misc.o(i.tcpProcessSegmentData))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>

<P><STRONG><a name="[312]"></a>tcpReadRxBuffer</STRONG> (ARM, 152 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpReadRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tcpReadRxBuffer &rArr; netBufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[313]"></a>tcpReadTxBuffer</STRONG> (ARM, 168 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpReadTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = tcpReadTxBuffer &rArr; netBufferConcat
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>

<P><STRONG><a name="[2c9]"></a>tcpReceive</STRONG> (ARM, 680 bytes, Stack size 48 bytes, tcp.o(i.tcpReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[303]"></a>tcpRejectSegment</STRONG> (ARM, 564 bytes, Stack size 104 bytes, tcp_misc.o(i.tcpRejectSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
</UL>

<P><STRONG><a name="[2e5]"></a>tcpRetransmitSegment</STRONG> (ARM, 328 bytes, Stack size 72 bytes, tcp_misc.o(i.tcpRetransmitSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
</UL>

<P><STRONG><a name="[2cd]"></a>tcpSend</STRONG> (ARM, 500 bytes, Stack size 40 bytes, tcp.o(i.tcpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>

<P><STRONG><a name="[2d0]"></a>tcpSendResetSegment</STRONG> (ARM, 124 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpSendResetSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
</UL>

<P><STRONG><a name="[2d7]"></a>tcpSendSegment</STRONG> (ARM, 904 bytes, Stack size 112 bytes, tcp_misc.o(i.tcpSendSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerRunning
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>

<P><STRONG><a name="[309]"></a>tcpStateCloseWait</STRONG> (ARM, 176 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateCloseWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpStateCloseWait &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[304]"></a>tcpStateClosed</STRONG> (ARM, 64 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateClosed))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = tcpStateClosed &rArr; tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[30d]"></a>tcpStateClosing</STRONG> (ARM, 196 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateClosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpStateClosing &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[308]"></a>tcpStateEstablished</STRONG> (ARM, 312 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateEstablished))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
</UL>

<P><STRONG><a name="[30b]"></a>tcpStateFinWait1</STRONG> (ARM, 380 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateFinWait1))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait1 &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[30c]"></a>tcpStateFinWait2</STRONG> (ARM, 300 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateFinWait2))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait2 &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[30a]"></a>tcpStateLastAck</STRONG> (ARM, 168 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateLastAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpStateLastAck &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[305]"></a>tcpStateListen</STRONG> (ARM, 492 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcpStateListen &rArr; tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateSyn
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[307]"></a>tcpStateSynReceived</STRONG> (ARM, 284 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateSynReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[306]"></a>tcpStateSynSent</STRONG> (ARM, 580 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateSynSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpStateSynSent &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[30e]"></a>tcpStateTimeWait</STRONG> (ARM, 224 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateTimeWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpStateTimeWait &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[29c]"></a>tcpTick</STRONG> (ARM, 120 bytes, Stack size 16 bytes, tcp_timer.o(i.tcpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpTick &rArr; tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckKeepAliveTimer
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[294]"></a>tcpUpdateEvents</STRONG> (ARM, 728 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpUpdateEvents
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[314]"></a>tcpUpdateReceiveWindow</STRONG> (ARM, 196 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateReceiveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[2dd]"></a>tcpUpdateRetransmitQueue</STRONG> (ARM, 232 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpUpdateRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tcpUpdateRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[311]"></a>tcpUpdateSackBlocks</STRONG> (ARM, 308 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateSackBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpUpdateSackBlocks &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[2db]"></a>tcpUpdateSendWindow</STRONG> (ARM, 364 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpUpdateSendWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpUpdateSendWindow &rArr; netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[2fe]"></a>tcpWaitForEvents</STRONG> (ARM, 104 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpWaitForEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpWaitForEvents &rArr; tcpUpdateEvents
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[310]"></a>tcpWriteRxBuffer</STRONG> (ARM, 176 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpWriteRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tcpWriteRxBuffer &rArr; netBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[315]"></a>tcpWriteTxBuffer</STRONG> (ARM, 152 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpWriteTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tcpWriteTxBuffer &rArr; netBufferWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[15f]"></a>tcpconfig_protocol_send</STRONG> (ARM, 104 bytes, Stack size 64 bytes, telnet_server.o(i.tcpconfig_protocol_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tcpconfig_protocol_send &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculation
</UL>

<P><STRONG><a name="[253]"></a>telnetServerInit</STRONG> (ARM, 188 bytes, Stack size 16 bytes, telnet_server.o(i.telnetServerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = telnetServerInit &rArr; socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBind
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31c]"></a>telnetServerStateExecute</STRONG> (ARM, 408 bytes, Stack size 48 bytes, telnet_server.o(i.telnetServerStateExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = telnetServerStateExecute &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_ftp_char
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config_protocol
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerTask
</UL>

<P><STRONG><a name="[31d]"></a>telnetServerStateListen</STRONG> (ARM, 108 bytes, Stack size 16 bytes, telnet_server.o(i.telnetServerStateListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = telnetServerStateListen &rArr; tcpAccept &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerTask
</UL>

<P><STRONG><a name="[31e]"></a>telnetServerStateReceive</STRONG> (ARM, 300 bytes, Stack size 24 bytes, telnet_server.o(i.telnetServerStateReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = telnetServerStateReceive &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerTask
</UL>

<P><STRONG><a name="[31f]"></a>telnetServerStateSend</STRONG> (ARM, 356 bytes, Stack size 24 bytes, telnet_server.o(i.telnetServerStateSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = telnetServerStateSend &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerTask
</UL>

<P><STRONG><a name="[16f]"></a>telnetServerTask</STRONG> (ARM, 152 bytes, Stack size 8 bytes, telnet_server.o(i.telnetServerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = telnetServerTask &rArr; telnetServerStateSend &rArr; socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverwait
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetserverclose
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateSend
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateReceive
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateListen
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerStateExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
</UL>

<P><STRONG><a name="[321]"></a>telnetserverclose</STRONG> (ARM, 72 bytes, Stack size 8 bytes, telnet_server.o(i.telnetserverclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = telnetserverclose &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerTask
</UL>

<P><STRONG><a name="[320]"></a>telnetserverwait</STRONG> (ARM, 152 bytes, Stack size 8 bytes, telnet_server.o(i.telnetserverwait))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = telnetserverwait &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnetServerTask
</UL>

<P><STRONG><a name="[2b0]"></a>total_register</STRONG> (ARM, 1308 bytes, Stack size 48 bytes, key_menu.o(i.total_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = total_register &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_key_sd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_keyevents
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_keys
</UL>

<P><STRONG><a name="[c2]"></a>trg</STRONG> (ARM, 196 bytes, Stack size 0 bytes, door.o(i.trg))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_Handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrong_unauth_key_check
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_solenoid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_output
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_board
</UL>

<P><STRONG><a name="[18f]"></a>udpAllocBuffer</STRONG> (ARM, 68 bytes, Stack size 16 bytes, udp.o(i.udpAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = udpAllocBuffer &rArr; ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsCreateMessage
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[195]"></a>udpAttachRxCallback</STRONG> (ARM, 108 bytes, Stack size 8 bytes, udp.o(i.udpAttachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStart
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[1a7]"></a>udpDetachRxCallback</STRONG> (ARM, 100 bytes, Stack size 4 bytes, udp.o(i.udpDetachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>

<P><STRONG><a name="[323]"></a>udpDumpHeader</STRONG> (ARM, 4 bytes, Stack size 0 bytes, udp.o(i.udpDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
</UL>

<P><STRONG><a name="[1ae]"></a>udpGetDynamicPort</STRONG> (ARM, 100 bytes, Stack size 8 bytes, udp.o(i.udpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udpGetDynamicPort &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[290]"></a>udpInit</STRONG> (ARM, 40 bytes, Stack size 8 bytes, udp.o(i.udpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udpInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[322]"></a>udpInvokeRxCallback</STRONG> (ARM, 192 bytes, Stack size 56 bytes, udp.o(i.udpInvokeRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udpInvokeRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[222]"></a>udpProcessDatagram</STRONG> (ARM, 848 bytes, Stack size 64 bytes, udp.o(i.udpProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = udpProcessDatagram &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDumpHeader
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[2ca]"></a>udpReceiveDatagram</STRONG> (ARM, 280 bytes, Stack size 24 bytes, udp.o(i.udpReceiveDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = udpReceiveDatagram &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[191]"></a>udpSendBuffer</STRONG> (ARM, 472 bytes, Stack size 72 bytes, udp.o(i.udpSendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdnsSendMessage
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[2ce]"></a>udpSendDatagram</STRONG> (ARM, 304 bytes, Stack size 72 bytes, udp.o(i.udpSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = udpSendDatagram &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; osAllocMem &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsMulticastAddr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>

<P><STRONG><a name="[295]"></a>udpUpdateEvents</STRONG> (ARM, 160 bytes, Stack size 8 bytes, udp.o(i.udpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udpUpdateEvents
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
</UL>

<P><STRONG><a name="[11a]"></a>update_key_log</STRONG> (ARM, 336 bytes, Stack size 72 bytes, protocol_comm.o(i.update_key_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = update_key_log &rArr; write_keyevents_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_keyevents_sd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
</UL>

<P><STRONG><a name="[25b]"></a>user_mykee_task</STRONG> (ARM, 12860 bytes, Stack size 448 bytes, task_management.o(i.user_mykee_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = user_mykee_task &rArr; wrong_unauth_key_check &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_key_log
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_str
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ticks_value
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_key_status
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_user_key_no
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_key_sd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_sd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_keyevents_sd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key_sd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_on
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delete
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_char
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_string
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key1
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_date
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_identity
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regular_card
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getresult_identy
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_user_bio
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p1str
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_task_status
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_doy_dow
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Trigger_Timeout
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrong_unauth_key_check
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiple_task_access
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sec_time_value
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_task_select
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_door_open
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_keyposition
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_user_task
</UL>

<P><STRONG><a name="[259]"></a>utilities</STRONG> (ARM, 272 bytes, Stack size 24 bytes, util_menu.o(i.utilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = utilities &rArr; Serial_no &rArr; delete_alluser &rArr; set_workdb &rArr; check_status_lumi &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_keys
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_index_str
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Identity
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_menu_administrator
</UL>

<P><STRONG><a name="[1f8]"></a>verify_date_time</STRONG> (ARM, 60 bytes, Stack size 16 bytes, clock_calndr.o(i.verify_date_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = verify_date_time &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[10d]"></a>verify_identity</STRONG> (ARM, 196 bytes, Stack size 48 bytes, bio.o(i.verify_identity))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368 + Unknown Stack Size
<LI>Call Chain = verify_identity &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lumidign_command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_verification
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_enrollment_user
</UL>

<P><STRONG><a name="[2a2]"></a>view_mac_address</STRONG> (ARM, 432 bytes, Stack size 80 bytes, mci_menu.o(i.view_mac_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = view_mac_address &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hexavalue
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mac_sd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mac_sd
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_intvalue
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[2cf]"></a>wdt_2S_Init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wdt.o(i.wdt_2S_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
</UL>

<P><STRONG><a name="[245]"></a>wdt_3S_Init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wdt.o(i.wdt_3S_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>wdt_reset_feed</STRONG> (ARM, 24 bytes, Stack size 0 bytes, wdt.o(i.wdt_reset_feed))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClienteventStateSend
</UL>

<P><STRONG><a name="[1d7]"></a>write_boot_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.write_boot_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_boot_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fw_download_sd
</UL>

<P><STRONG><a name="[1f4]"></a>write_comm_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.write_comm_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_comm_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_tcp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_hb
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port_cliq
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network1
</UL>

<P><STRONG><a name="[2b6]"></a>write_dayofmonth</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtc.o(i.write_dayofmonth))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_time
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[15c]"></a>write_event_sd</STRONG> (ARM, 56 bytes, Stack size 16 bytes, mci_menu.o(i.write_event_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_event_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prot_log_event
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_receive
</UL>

<P><STRONG><a name="[2b9]"></a>write_hr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtc.o(i.write_hr))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_time
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>

<P><STRONG><a name="[116]"></a>write_key_sd</STRONG> (ARM, 92 bytes, Stack size 8 bytes, mci_menu.o(i.write_key_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_key_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emerg_remove_return_key
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addnewkeys
</UL>

<P><STRONG><a name="[166]"></a>write_keyevents_sd</STRONG> (ARM, 92 bytes, Stack size 8 bytes, mci_menu.o(i.write_keyevents_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_keyevents_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_key_log
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_keyevents
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_check_2
</UL>

<P><STRONG><a name="[1f6]"></a>write_mac_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.write_mac_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_mac_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_mac_address
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
</UL>

<P><STRONG><a name="[2ba]"></a>write_min</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtc.o(i.write_min))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_time
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>

<P><STRONG><a name="[2b7]"></a>write_month</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtc.o(i.write_month))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_time
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[2bb]"></a>write_sec</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtc.o(i.write_sec))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_time
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>

<P><STRONG><a name="[d8]"></a>write_system_sd</STRONG> (ARM, 76 bytes, Stack size 8 bytes, mci_menu.o(i.write_system_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_system_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedefaults_sdcard
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_user
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_port
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_option
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip1
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ip
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operating_parameter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
</UL>

<P><STRONG><a name="[114]"></a>write_task_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.write_task_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_task_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftask_allign
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_task
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_task
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
</UL>

<P><STRONG><a name="[2b2]"></a>write_taskbkp_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.write_taskbkp_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_taskbkp_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftask_allign
</UL>

<P><STRONG><a name="[142]"></a>write_user_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.write_user_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_user_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign_bio
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bio_verification
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_user
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_user
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_user_details
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chage_bioflag
</UL>

<P><STRONG><a name="[2b1]"></a>write_userbkp_sd</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mci_menu.o(i.write_userbkp_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_userbkp_sd &rArr; WrBytes &rArr; WriteEn &rArr; spi_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrBytes
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign_bio
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_user_allign
</UL>

<P><STRONG><a name="[2b8]"></a>write_year</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rtc.o(i.write_year))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_time
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[da]"></a>writedefaults_sdcard</STRONG> (ARM, 616 bytes, Stack size 72 bytes, mci_menu.o(i.writedefaults_sdcard))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;total_register
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_restart
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_code
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_menu_key
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SectorErase
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_sd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_comm_sd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_system_sd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_comm_sd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_keyevents
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utilities
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_no
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_protocol_configpacket_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Customer_ID
</UL>

<P><STRONG><a name="[325]"></a>wrong_unauth_key_check</STRONG> (ARM, 1680 bytes, Stack size 120 bytes, task_management.o(i.wrong_unauth_key_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = wrong_unauth_key_check &rArr; delay &rArr; tcpClienthbTask &rArr; tcpClientStatereceive &rArr; check_config_receive &rArr; handle_protocol_configpacket_event &rArr; writedefaults_sdcard &rArr;  delay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mykee_task
</UL>

<P><STRONG><a name="[10]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>_get_lc_numeric</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via Veneer)
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_voltage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_voltage
</UL>

<P><STRONG><a name="[327]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[36d]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[36e]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[32b]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_voltage
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_voltage
</UL>

<P><STRONG><a name="[32a]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[329]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[328]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[8]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[37]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d1]"></a>AddRoundKey</STRONG> (ARM, 112 bytes, Stack size 0 bytes, aesencriptionwipro.o(i.AddRoundKey))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[b0]"></a>BlockCopy</STRONG> (ARM, 40 bytes, Stack size 0 bytes, aesencriptionwipro.o(i.BlockCopy))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
</UL>

<P><STRONG><a name="[b5]"></a>Cipher</STRONG> (ARM, 84 bytes, Stack size 8 bytes, aesencriptionwipro.o(i.Cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cipher &rArr; MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRows
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
</UL>

<P><STRONG><a name="[b2]"></a>InvCipher</STRONG> (ARM, 84 bytes, Stack size 8 bytes, aesencriptionwipro.o(i.InvCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InvCipher &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
</UL>

<P><STRONG><a name="[e6]"></a>InvMixColumns</STRONG> (ARM, 1736 bytes, Stack size 48 bytes, aesencriptionwipro.o(i.InvMixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[e4]"></a>InvShiftRows</STRONG> (ARM, 292 bytes, Stack size 0 bytes, aesencriptionwipro.o(i.InvShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[e5]"></a>InvSubBytes</STRONG> (ARM, 96 bytes, Stack size 16 bytes, aesencriptionwipro.o(i.InvSubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InvSubBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSBoxInvert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[b1]"></a>KeyExpansion</STRONG> (ARM, 508 bytes, Stack size 24 bytes, aesencriptionwipro.o(i.KeyExpansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyExpansion
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSBoxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
</UL>

<P><STRONG><a name="[d4]"></a>MixColumns</STRONG> (ARM, 444 bytes, Stack size 24 bytes, aesencriptionwipro.o(i.MixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[d3]"></a>ShiftRows</STRONG> (ARM, 292 bytes, Stack size 0 bytes, aesencriptionwipro.o(i.ShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[d2]"></a>SubBytes</STRONG> (ARM, 96 bytes, Stack size 16 bytes, aesencriptionwipro.o(i.SubBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SubBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSBoxValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[b3]"></a>XorWithIv</STRONG> (ARM, 56 bytes, Stack size 0 bytes, aesencriptionwipro.o(i.XorWithIv))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_encrypt_buffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_CBC_decrypt_buffer
</UL>

<P><STRONG><a name="[e8]"></a>getSBoxInvert</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aesencriptionwipro.o(i.getSBoxInvert))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
</UL>

<P><STRONG><a name="[e9]"></a>getSBoxValue</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aesencriptionwipro.o(i.getSBoxValue))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubBytes
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>

<P><STRONG><a name="[e7]"></a>xtime</STRONG> (ARM, 32 bytes, Stack size 0 bytes, aesencriptionwipro.o(i.xtime))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixColumns
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
</UL>

<P><STRONG><a name="[2b5]"></a>i2c_lpc_ask_polling_op</STRONG> (ARM, 168 bytes, Stack size 0 bytes, i2c.o(i.i2c_lpc_ask_polling_op))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_i2c_cmd
</UL>

<P><STRONG><a name="[1fc]"></a>i2c_lpc_ctrl</STRONG> (ARM, 168 bytes, Stack size 16 bytes, i2c.o(i.i2c_lpc_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_lpc_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_i2c_cmd
</UL>

<P><STRONG><a name="[1fe]"></a>i2c_lpc_rx_to_buf</STRONG> (ARM, 336 bytes, Stack size 56 bytes, i2c.o(i.i2c_lpc_rx_to_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = i2c_lpc_rx_to_buf &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_i2c_cmd
</UL>

<P><STRONG><a name="[1fd]"></a>i2c_lpc_stop</STRONG> (ARM, 32 bytes, Stack size 0 bytes, i2c.o(i.i2c_lpc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_i2c_cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_lpc_ctrl
</UL>

<P><STRONG><a name="[2b4]"></a>i2c_lpc_wr_byte</STRONG> (ARM, 48 bytes, Stack size 0 bytes, i2c.o(i.i2c_lpc_wr_byte))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_i2c_cmd
</UL>

<P><STRONG><a name="[f3]"></a>led</STRONG> (ARM, 140 bytes, Stack size 0 bytes, timer.o(i.led))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TICKER_25us_Handler
</UL>

<P><STRONG><a name="[16c]"></a>set_date</STRONG> (ARM, 504 bytes, Stack size 32 bytes, clock_calndr.o(i.set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = set_date &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_char
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_year
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_month
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dayofmonth
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
</UL>

<P><STRONG><a name="[16b]"></a>set_time</STRONG> (ARM, 360 bytes, Stack size 16 bytes, clock_calndr.o(i.set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = set_time &rArr; enter_digits &rArr; key1 &rArr;  tcpClienthbTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_str
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_char
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_digits
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sec
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_min
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date_time1
</UL>

<P><STRONG><a name="[83]"></a>_tm_carry</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tm_carry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[a8]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[a7]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[a6]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[a9]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[8a]"></a>_fp_digits</STRONG> (Thumb, 414 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[12]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[a2]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[94]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[97]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
